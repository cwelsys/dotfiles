encryption = "age"
mode = "file"
progress = true

{{ $gpgId := "061DF935B288405FF6B906169496153E284399EF" }}
{{ $agePubKey := "age1wezwdvug6rdnwedvw8tk7npjm2rlmmewukxdat8v5y5garwvgdeq3ww5m9" }}
{{ $sshId := "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINXPGUiiFFBzqutbhNqi5RjykdlwvdFveB/XkSdg0BAM" }}

{{- $shell := "" }}
{{- if eq .chezmoi.os "windows" }}
  {{- $shell = "pwsh" }}
{{- else }}
  {{- $shell = "zsh" }}
{{- end }}

{{- $editor := "nvim" }}
{{ if lookPath "code" -}}
{{- $editor = "code --wait" }}
[edit]
    args    = ["-r", "--wait"]
    command = "code"
    watch = true
[merge]
    command = "bash"
    args = [
        "-c",
        "cp '{{ "{{" }} .Target {{ "}}" }}' '{{ "{{" }} .Target {{ "}}" }}.base' && code --new-window --wait --merge '{{ "{{" }} .Destination {{ "}}" }}' '{{ "{{" }} .Target {{ "}}" }}' '{{ "{{" }} .Target {{ "}}" }}.base' '{{ "{{" }} .Source {{ "}}" }}'",
    ]
{{ else -}}
[edit]
    command = "nvim"
    watch = true
[merge]
  command = "nvim"
  args = [
    "-d",
    "{{ "{{" }} .Destination {{ "}}" }}",
    "{{ "{{" }} .Source {{ "}}" }}",
    "{{ "{{" }} .Target {{ "}}" }}",
  ]
{{ end -}}

[data]
{{- $isLaptop := false }}
{{- if lookPath "hostnamectl" }}
  {{- if eq (output "hostnamectl" "chassis") "laptop" }}
    {{- $isLaptop = true }}
  {{- end }}
{{- else if lookPath "wmic" }}
  {{- if eq (output "wmic" "computersystem" "get" "PCSystemType" "/VALUE" | trim) "PCSystemType=2" }}
    {{- $isLaptop = true }}
  {{- end }}
{{- end }}
editor = {{ $editor | quote }}
isLaptop = {{ $isLaptop }}
gpgId = {{ $gpgId | quote }}
agePubKey = {{ $agePubKey | quote }}
sshId = {{ $sshId | quote }}
{{- $isWSL := false }}
{{- if eq .chezmoi.os "linux" }}
  {{- if hasKey .chezmoi "kernel" }}
    {{- if hasKey .chezmoi.kernel "osrelease" }}
      {{- $isWSL = (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
    {{- end }}
  {{- end }}
{{- end }}
isWSL = {{ $isWSL }}
{{- $isVM := false }}
{{- if eq .chezmoi.os "windows" }}
  {{- /* Check for VM using multiple methods for robustness */ -}}
  {{- $computerSystem := output "wmic" "computersystem" "get" "Model" "/value" | trim }}
  {{- $manufacturer := output "wmic" "computersystem" "get" "Manufacturer" "/value" | trim }}
  {{- if or (contains $computerSystem "Virtual") (contains $computerSystem "VMware") (contains $manufacturer "VMware") (contains $manufacturer "Microsoft Corporation Virtual") (contains $computerSystem "VirtualBox") (contains $manufacturer "QEMU") }}
    {{- $isVM = true }}
  {{- end }}
{{- else if eq .chezmoi.os "linux" }}
  {{- /* For Linux systems, check DMI info */ -}}
  {{- if lookPath "dmidecode" }}
    {{- $dmiSystem := output "dmidecode" "-s" "system-manufacturer" | trim }}
    {{- $dmiProduct := output "dmidecode" "-s" "system-product-name" | trim }}
    {{- if or (contains $dmiSystem "VMware") (contains $dmiSystem "QEMU") (contains $dmiSystem "Microsoft Corporation") (contains $dmiProduct "Virtual") (contains $dmiProduct "VMware") }}
      {{- $isVM = true }}
    {{- end }}
  {{- else if lookPath "systemd-detect-virt" }}
    {{- $virtCheck := output "systemd-detect-virt" | trim }}
    {{- if ne $virtCheck "none" }}
      {{- $isVM = true }}
    {{- end }}
  {{- end }}
{{- else if eq .chezmoi.os "darwin" }}
  {{- /* For macOS, check if running under virtualization */ -}}
  {{- $ioreg := output "ioreg" "-l" | toString }}
  {{- if or (contains $ioreg "VMware") (contains $ioreg "Parallels") (contains $ioreg "VirtualBox") }}
    {{- $isVM = true }}
  {{- end }}
{{- end }}
isVM = {{ $isVM }}

[age]
  identity = "~/.config/.key"
  recipient = {{ $agePubKey | quote }}

[gpg]
  recipient = {{ $gpgId | quote }}
  args = [ "--quiet", ]

[git]
  autoAdd = true
  autoCommit = false
  autoPush = false

[diff]
  format = "git"
  pager = "delta"

[onepassword]
  mode = "connect"

[interpreters.ps1]
  command = "pwsh"
  args = ["-NoLogo"]

[cd]
  command = {{ $shell | quote }}








