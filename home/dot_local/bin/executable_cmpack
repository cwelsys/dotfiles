#!/bin/bash

set -eo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

# Detect OS and distribution
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
PKG_MANAGER=""
OS_SECTION=""
YAML_FILE=""
USE_BREW=false
USE_NATIVE=false
NATIVE_PKG_MANAGER=""

if [[ "$OS" == "darwin" ]]; then
    PKG_MANAGER="brew"
    OS_SECTION="darwin"
    USE_BREW=true
elif [[ "$OS" == "linux" ]]; then
    # Detect native package manager first
    if [[ -f /etc/arch-release ]] || [[ -f /etc/os-release && $(grep -E '^ID=arch$' /etc/os-release) ]]; then
        NATIVE_PKG_MANAGER="pacman"
        OS_SECTION="arch"
        USE_NATIVE=true
    elif [[ -f /etc/fedora-release ]] || [[ -f /etc/os-release && $(grep -E '^ID=fedora$' /etc/os-release) ]]; then
        NATIVE_PKG_MANAGER="dnf"
        OS_SECTION="fedora"
        USE_NATIVE=true
    else
        print_color "$RED" "‚ùå Only Arch Linux and Fedora are supported on Linux systems"
        exit 1
    fi
    
    # Check if brew is also available on Linux
    if command -v brew &> /dev/null; then
        USE_BREW=true
        PKG_MANAGER="brew"  # Primary for file selection logic
    else
        PKG_MANAGER="$NATIVE_PKG_MANAGER"
    fi
else
    print_color "$RED" "‚ùå Unsupported operating system: $OS (only Darwin, Arch, and Fedora are supported)"
    exit 1
fi

# Check if package manager is installed
if ! command -v "$PKG_MANAGER" &> /dev/null; then
    if [[ "$PKG_MANAGER" == "brew" ]]; then
        # Check if Homebrew is installed but not in PATH
        if [[ -x "/opt/homebrew/bin/brew" ]] || [[ -x "/usr/local/bin/brew" ]]; then
            # Determine which Homebrew installation exists
            if [[ -x "/opt/homebrew/bin/brew" ]]; then
                HOMEBREW_PREFIX="/opt/homebrew"
            else
                HOMEBREW_PREFIX="/usr/local"
            fi

            # Determine shell RC file
            case "${SHELL}" in
                */bash*)
                    if [[ -r "${HOME}/.bash_profile" ]]; then
                        shell_rcfile="${HOME}/.bash_profile"
                    else
                        shell_rcfile="${HOME}/.profile"
                    fi
                    ;;
                */zsh*)
                    shell_rcfile="${HOME}/.zprofile"
                    ;;
                */fish*)
                    shell_rcfile="${HOME}/.config/fish/config.fish"
                    ;;
                *)
                    shell_rcfile="${HOME}/.profile"
                    ;;
            esac

            print_color "$YELLOW" "‚ö†Ô∏è  Homebrew is installed but not in PATH."

            # Check if shellenv is already in RC file
            if grep -qs "eval \"\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\"" "${shell_rcfile}" 2>/dev/null; then
                print_color "$CYAN" "Run this command to add Homebrew to your PATH:"
                print_color "$CYAN" "  eval \"\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\""
            else
                print_color "$CYAN" "Run these commands to add Homebrew to your PATH:"
                print_color "$CYAN" "  echo >> ${shell_rcfile}"
                print_color "$CYAN" "  echo 'eval \"\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\"' >> ${shell_rcfile}"
                print_color "$CYAN" "  eval \"\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\""
            fi
        else
            print_color "$RED" "‚ùå Homebrew not found. Install it with:"
            print_color "$CYAN" '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
        fi
    else
        print_color "$RED" "‚ùå Package manager '$PKG_MANAGER' not found."
    fi
    exit 1
fi

# Determine the manifest file path
if [[ "$USE_BREW" == true ]]; then
    if [[ -n "${DOTS:-}" ]]; then
        YAML_FILE="$DOTS/.chezmoidata/brews.yml"
    else
        YAML_FILE="$HOME/.local/share/chezmoi/home/.chezmoidata/brews.yml"
    fi
else
    if [[ -n "${DOTS:-}" ]]; then
        YAML_FILE="$DOTS/.chezmoidata/pkgs.yml"
    else
        YAML_FILE="$HOME/.local/share/chezmoi/home/.chezmoidata/pkgs.yml"
    fi
fi

if [[ ! -f "$YAML_FILE" ]]; then
    print_color "$RED" "‚ùå Manifest file not found at: $YAML_FILE"
    exit 1
fi

# Create backup
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_DIR="$HOME/.config/chezmoi/backups"
mkdir -p "$BACKUP_DIR"
BACKUP_FILENAME=$(basename "$YAML_FILE")
BACKUP_PATH="$BACKUP_DIR/${BACKUP_FILENAME}.bak.$TIMESTAMP"
cp "$YAML_FILE" "$BACKUP_PATH"
print_color "$GRAY" "üíæ Created backup at $BACKUP_PATH"

# Clean up old backups (keep only the 10 most recent)
MAX_BACKUPS=10
if ls "$BACKUP_DIR"/${BACKUP_FILENAME}.bak.* >/dev/null 2>&1; then
    BACKUP_COUNT=$(ls -1 "$BACKUP_DIR"/${BACKUP_FILENAME}.bak.* | wc -l)
    if [[ $BACKUP_COUNT -gt $MAX_BACKUPS ]]; then
        EXCESS_COUNT=$((BACKUP_COUNT - MAX_BACKUPS))
        ls -1t "$BACKUP_DIR"/${BACKUP_FILENAME}.bak.* | tail -n $EXCESS_COUNT | xargs rm -f
        print_color "$GRAY" "üßπ Cleaned up $EXCESS_COUNT old backup(s), keeping $MAX_BACKUPS most recent"
    fi
fi

# Get currently installed packages
INSTALLED_BREWS=()
INSTALLED_CASKS=()
INSTALLED_NATIVE=()

# Get brew packages if available
if [[ "$USE_BREW" == true ]]; then
    print_color "$BLUE" "üîç Getting installed brew packages..."
    # Use 'brew leaves' to get only top-level formulas (not dependencies)
    INSTALLED_BREWS=($(brew leaves))
    INSTALLED_CASKS=($(brew list --cask))
    print_color "$CYAN" "Found ${#INSTALLED_BREWS[@]} installed formulas and ${#INSTALLED_CASKS[@]} casks"
fi

# Get native packages if available  
if [[ "$USE_NATIVE" == true ]]; then
    print_color "$BLUE" "üîç Getting installed $NATIVE_PKG_MANAGER packages..."
    
    case "$NATIVE_PKG_MANAGER" in
        pacman)
            # Get explicitly installed packages (not dependencies)
            INSTALLED_NATIVE=($(pacman -Qe | awk '{print $1}' | sort))
            ;;
        dnf)
            # Get explicitly installed packages (not dependencies) with repo info
            INSTALLED_NATIVE_WITH_REPOS=($(dnf repoquery --userinstalled --qf '%{name}|%{from_repo}\n' | sort | uniq))
            INSTALLED_NATIVE=()
            INSTALLED_NATIVE_REPOS=()
            
            # Parse package names and repos
            for pkg_repo in "${INSTALLED_NATIVE_WITH_REPOS[@]}"; do
                pkg_name="${pkg_repo%|*}"
                repo_name="${pkg_repo#*|}"
                INSTALLED_NATIVE+=("$pkg_name")
                INSTALLED_NATIVE_REPOS+=("$repo_name")
            done
            
            # Collect unique repositories (excluding default ones)
            UNIQUE_REPOS=()
            for repo in "${INSTALLED_NATIVE_REPOS[@]}"; do
                # Skip default repos and unknown/commandline installs
                if [[ "$repo" != "anaconda" && "$repo" != "fedora" && "$repo" != "updates" && 
                      "$repo" != "<unknown>" && "$repo" != "@commandline" && 
                      ! " ${UNIQUE_REPOS[*]:-} " =~ " ${repo} " ]]; then
                    UNIQUE_REPOS+=("$repo")
                fi
            done
            ;;
        *)
            print_color "$RED" "‚ùå Unsupported package manager: $NATIVE_PKG_MANAGER"
            exit 1
            ;;
    esac

    print_color "$CYAN" "Found ${#INSTALLED_NATIVE[@]} installed $NATIVE_PKG_MANAGER packages"
fi

# Parse current manifest to get existing packages
CURRENT_BREWS=()
CURRENT_CASKS=()
CURRENT_NATIVE=()
IN_OS_BREWS=false
IN_OS_CASKS=false
IN_SHARED_BREWS=false
IN_SHARED_CASKS=false

# Parse brew packages if available
if [[ "$USE_BREW" == true ]]; then
    # Parse brews.yml structure
    while IFS= read -r line; do
        # Check section headers
        if [[ "$line" =~ ^[[:space:]]*${OS_SECTION}:[[:space:]]*$ ]]; then
            IN_OS_BREWS=false
            IN_OS_CASKS=false
            IN_SHARED_BREWS=false
            IN_SHARED_CASKS=false
        elif [[ "$line" =~ ^[[:space:]]*shared:[[:space:]]*$ ]]; then
            IN_OS_BREWS=false
            IN_OS_CASKS=false
            IN_SHARED_BREWS=false
            IN_SHARED_CASKS=false
        elif [[ "$line" =~ ^[[:space:]]*brews:[[:space:]]*$ ]]; then
            if [[ "$IN_OS_BREWS" == false && "$IN_SHARED_BREWS" == false ]]; then
                # Determine if we're in OS-specific or shared section
                if grep -B10 "brews:" "$YAML_FILE" | tail -10 | grep -q "${OS_SECTION}:"; then
                    IN_OS_BREWS=true
                else
                    IN_SHARED_BREWS=true
                fi
            fi
        elif [[ "$line" =~ ^[[:space:]]*casks:[[:space:]]*$ ]]; then
            if [[ "$IN_OS_CASKS" == false && "$IN_SHARED_CASKS" == false ]]; then
                # Determine if we're in OS-specific or shared section
                if grep -B10 "casks:" "$YAML_FILE" | tail -10 | grep -q "${OS_SECTION}:"; then
                    IN_OS_CASKS=true
                else
                    IN_SHARED_CASKS=true
                fi
            fi
        # Parse package entries
        elif [[ "$line" =~ ^[[:space:]]*-[[:space:]]+([^[:space:]]+) ]]; then
            PKG="${BASH_REMATCH[1]}"
            if [[ "$IN_OS_BREWS" == true || "$IN_SHARED_BREWS" == true ]]; then
                CURRENT_BREWS+=("$PKG")
            elif [[ "$IN_OS_CASKS" == true || "$IN_SHARED_CASKS" == true ]]; then
                CURRENT_CASKS+=("$PKG")
            fi
        fi
    done < "$YAML_FILE"
fi

# Parse native packages if available and file exists
if [[ "$USE_NATIVE" == true ]]; then
    NATIVE_YAML_FILE=""
    if [[ -n "${DOTS:-}" ]]; then
        NATIVE_YAML_FILE="$DOTS/.chezmoidata/pkgs.yml"
    else
        NATIVE_YAML_FILE="$HOME/.local/share/chezmoi/home/.chezmoidata/pkgs.yml"
    fi
    
    if [[ -f "$NATIVE_YAML_FILE" ]]; then
        # Parse pkgs.yml structure
        IN_OS_SECTION=false
        IN_PKG_SECTION=false

        while IFS= read -r line; do
            # Check section headers
            if [[ "$line" =~ ^[[:space:]]*${OS_SECTION}:[[:space:]]*$ ]]; then
                IN_OS_SECTION=true
                IN_PKG_SECTION=false
            elif [[ "$line" =~ ^[[:space:]]*${NATIVE_PKG_MANAGER}:[[:space:]]*$ ]] && [[ "$IN_OS_SECTION" == true ]]; then
                IN_PKG_SECTION=true
            elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$IN_OS_SECTION" == true ]]; then
                # Different package manager section
                IN_PKG_SECTION=false
            elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$IN_OS_SECTION" == false ]]; then
                # Different OS section
                IN_OS_SECTION=false
                IN_PKG_SECTION=false
            # Parse package entries
            elif [[ "$line" =~ ^[[:space:]]*-[[:space:]]+([^[:space:]]+) ]] && [[ "$IN_PKG_SECTION" == true ]]; then
                PKG="${BASH_REMATCH[1]}"
                CURRENT_NATIVE+=("$PKG")
            fi
        done < "$NATIVE_YAML_FILE"
    fi
fi

# Find differences
NEW_BREWS=()
NEW_CASKS=()
NEW_NATIVE=()
REMOVED_BREWS=()
REMOVED_CASKS=()
REMOVED_NATIVE=()

# Find new packages (deduplicate as we go)
if [[ "$USE_BREW" == true ]]; then
    for pkg in "${INSTALLED_BREWS[@]}"; do
        if [[ ! " ${CURRENT_BREWS[*]:-} " =~ " ${pkg} " ]]; then
            NEW_BREWS+=("$pkg")
        fi
    done

    for pkg in "${INSTALLED_CASKS[@]}"; do
        if [[ ! " ${CURRENT_CASKS[*]:-} " =~ " ${pkg} " ]]; then
            NEW_CASKS+=("$pkg")
        fi
    done
fi

if [[ "$USE_NATIVE" == true ]]; then
    for pkg in "${INSTALLED_NATIVE[@]}"; do
        if [[ ! " ${CURRENT_NATIVE[*]:-} " =~ " ${pkg} " ]]; then
            NEW_NATIVE+=("$pkg")
        fi
    done
fi

# Find removed packages - use the already parsed CURRENT arrays
if [[ "$USE_BREW" == true ]]; then
    for pkg in "${CURRENT_BREWS[@]}"; do
        if [[ ! " ${INSTALLED_BREWS[*]:-} " =~ " ${pkg} " ]] && [[ ! " ${REMOVED_BREWS[*]:-} " =~ " ${pkg} " ]]; then
            REMOVED_BREWS+=("$pkg")
        fi
    done

    for pkg in "${CURRENT_CASKS[@]}"; do
        if [[ ! " ${INSTALLED_CASKS[*]:-} " =~ " ${pkg} " ]] && [[ ! " ${REMOVED_CASKS[*]:-} " =~ " ${pkg} " ]]; then
            REMOVED_CASKS+=("$pkg")
        fi
    done
fi

if [[ "$USE_NATIVE" == true ]]; then
    for pkg in "${CURRENT_NATIVE[@]}"; do
        if [[ ! " ${INSTALLED_NATIVE[*]:-} " =~ " ${pkg} " ]] && [[ ! " ${REMOVED_NATIVE[*]:-} " =~ " ${pkg} " ]]; then
            REMOVED_NATIVE+=("$pkg")
        fi
    done
fi

# Check if any changes are needed
if [[ ${#NEW_BREWS[@]} -eq 0 && ${#NEW_CASKS[@]} -eq 0 && ${#NEW_NATIVE[@]} -eq 0 && ${#REMOVED_BREWS[@]} -eq 0 && ${#REMOVED_CASKS[@]} -eq 0 && ${#REMOVED_NATIVE[@]} -eq 0 ]]; then
    print_color "$GREEN" "‚úÖ No changes needed - manifest is up to date"
    exit 0
fi

# Store pre-deduplication counts for comparison
PRE_DEDUP_NEW_BREWS=${#NEW_BREWS[@]}
PRE_DEDUP_NEW_CASKS=${#NEW_CASKS[@]}
PRE_DEDUP_NEW_NATIVE=${#NEW_NATIVE[@]}
PRE_DEDUP_REMOVED_BREWS=${#REMOVED_BREWS[@]}
PRE_DEDUP_REMOVED_CASKS=${#REMOVED_CASKS[@]}
PRE_DEDUP_REMOVED_NATIVE=${#REMOVED_NATIVE[@]}

# Function to update brew manifest file
update_brew_manifest() {
    local file="$1"
    local temp_file="$(mktemp)"
    local in_os_section=false
    local in_os_brews=false
    local in_os_casks=false
    local in_shared_brews=false
    local in_shared_casks=false
    
    while IFS= read -r line; do
        # Track sections
        if [[ "$line" =~ ^[[:space:]]*${OS_SECTION}:[[:space:]]*$ ]]; then
            in_os_section=true
            in_os_brews=false
            in_os_casks=false
            in_shared_brews=false
            in_shared_casks=false
        elif [[ "$line" =~ ^[[:space:]]*shared:[[:space:]]*$ ]]; then
            in_os_section=false
            in_os_brews=false
            in_os_casks=false
            in_shared_brews=false
            in_shared_casks=false
        elif [[ "$line" =~ ^[[:space:]]*brews:[[:space:]]*$ ]]; then
            if [[ "$in_os_section" == true ]]; then
                in_os_brews=true
                in_os_casks=false
            else
                in_shared_brews=true
                in_shared_casks=false
            fi
        elif [[ "$line" =~ ^[[:space:]]*casks:[[:space:]]*$ ]]; then
            if [[ "$in_os_section" == true ]]; then
                in_os_brews=false
                in_os_casks=true
            else
                in_shared_brews=false
                in_shared_casks=true
            fi
        fi

        # Skip removed packages
        local skip_line=false
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]]+([^[:space:]]+) ]]; then
            local pkg="${BASH_REMATCH[1]}"
            if [[ ("$in_os_brews" == true || "$in_shared_brews" == true) && " ${REMOVED_BREWS[*]:-} " =~ " ${pkg} " ]]; then
                skip_line=true
            elif [[ ("$in_os_casks" == true || "$in_shared_casks" == true) && " ${REMOVED_CASKS[*]:-} " =~ " ${pkg} " ]]; then
                skip_line=true
            fi
        fi

        if [[ "$skip_line" == false ]]; then
            echo "$line" >> "$temp_file"
        fi

        # Add new packages at the end of each section
        if [[ ("$in_os_brews" == true || "$in_shared_brews" == true) && "$line" =~ ^[[:space:]]*-[[:space:]]+ ]]; then
            local next_line=$(sed -n "$((NR+1))p" "$file" 2>/dev/null || echo "")
            if [[ ! "$next_line" =~ ^[[:space:]]*-[[:space:]]+ ]]; then
                for pkg in "${NEW_BREWS[@]}"; do
                    echo "      - $pkg" >> "$temp_file"
                done
                NEW_BREWS=()
            fi
        elif [[ ("$in_os_casks" == true || "$in_shared_casks" == true) && "$line" =~ ^[[:space:]]*-[[:space:]]+ ]]; then
            local next_line=$(sed -n "$((NR+1))p" "$file" 2>/dev/null || echo "")
            if [[ ! "$next_line" =~ ^[[:space:]]*-[[:space:]]+ ]]; then
                for pkg in "${NEW_CASKS[@]}"; do
                    echo "      - $pkg" >> "$temp_file"
                done
                NEW_CASKS=()
            fi
        fi
    done < "$file"

    # Handle empty sections
    if [[ ${#NEW_BREWS[@]} -gt 0 ]]; then
        local new_packages_file=$(mktemp)
        printf '      - %s\n' "${NEW_BREWS[@]}" > "$new_packages_file"
        awk -v newfile="$new_packages_file" '
            /^[[:space:]]*brews:[[:space:]]*$/ {
                print $0
                while ((getline line < newfile) > 0) {
                    print line
                }
                close(newfile)
                next
            }
            {print}
        ' "$temp_file" > "$temp_file.new"
        mv "$temp_file.new" "$temp_file"
        rm -f "$new_packages_file"
    fi

    if [[ ${#NEW_CASKS[@]} -gt 0 ]]; then
        local new_casks_file=$(mktemp)
        printf '      - %s\n' "${NEW_CASKS[@]}" > "$new_casks_file"
        awk -v newfile="$new_casks_file" '
            /^[[:space:]]*casks:[[:space:]]*$/ {
                print $0
                while ((getline line < newfile) > 0) {
                    print line
                }
                close(newfile)
                next
            }
            {print}
        ' "$temp_file" > "$temp_file.new"
        mv "$temp_file.new" "$temp_file"
        rm -f "$new_casks_file"
    fi

    mv "$temp_file" "$file"
}

# Function to update native package manifest file  
update_native_manifest() {
    local file="$1"
    local temp_file="$(mktemp)"
    local in_os_section=false
    local in_pkg_section=false
    
    while IFS= read -r line; do
        # Track sections
        if [[ "$line" =~ ^[[:space:]]*${OS_SECTION}:[[:space:]]*$ ]]; then
            in_os_section=true
            in_pkg_section=false
        elif [[ "$line" =~ ^[[:space:]]*${NATIVE_PKG_MANAGER}:[[:space:]]*$ ]] && [[ "$in_os_section" == true ]]; then
            in_pkg_section=true
        elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$in_os_section" == true ]]; then
            in_pkg_section=false
        elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$in_os_section" == false ]]; then
            in_os_section=false
            in_pkg_section=false
        fi

        # Skip removed packages
        local skip_line=false
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]]+([^[:space:]]+) ]] && [[ "$in_pkg_section" == true ]]; then
            local pkg="${BASH_REMATCH[1]}"
            if [[ " ${REMOVED_NATIVE[*]:-} " =~ " ${pkg} " ]]; then
                skip_line=true
            fi
        fi

        if [[ "$skip_line" == false ]]; then
            echo "$line" >> "$temp_file"
        fi

        # Add new packages at the end of the section
        if [[ "$in_pkg_section" == true && "$line" =~ ^[[:space:]]*-[[:space:]]+ ]]; then
            local next_line=$(sed -n "$((NR+1))p" "$file" 2>/dev/null || echo "")
            if [[ ! "$next_line" =~ ^[[:space:]]*-[[:space:]]+ ]]; then
                for pkg in "${NEW_NATIVE[@]}"; do
                    echo "      - $pkg" >> "$temp_file"
                done
                NEW_NATIVE=()
            fi
        fi
    done < "$file"

    # Handle empty sections
    if [[ ${#NEW_NATIVE[@]} -gt 0 ]]; then
        local new_packages_file=$(mktemp)
        printf '      - %s\n' "${NEW_NATIVE[@]}" > "$new_packages_file"
        awk -v section="$NATIVE_PKG_MANAGER" -v newfile="$new_packages_file" '
            /^[[:space:]]*'"$NATIVE_PKG_MANAGER"':[[:space:]]*$/ {
                print $0
                while ((getline line < newfile) > 0) {
                    print line
                }
                close(newfile)
                next
            }
            {print}
        ' "$temp_file" > "$temp_file.new"
        mv "$temp_file.new" "$temp_file"
        rm -f "$new_packages_file"
    fi

    mv "$temp_file" "$file"
}

# Function to add repos section to native manifest
add_repos_section() {
    local file="$1"
    
    if [[ ${#UNIQUE_REPOS[@]} -eq 0 ]]; then
        return
    fi
    
    # Check if repos section already exists
    if grep -q "^[[:space:]]*repos:[[:space:]]*$" "$file"; then
        print_color "$BLUE" "üì¶ Repos section already exists, skipping..."
        return
    fi
    
    print_color "$BLUE" "üì¶ Adding repos section with ${#UNIQUE_REPOS[@]} repositories..."
    
    # Find the fedora section and add repos before dnf
    local temp_file="$(mktemp)"
    local in_fedora_section=false
    local added_repos=false
    
    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]*fedora:[[:space:]]*$ ]]; then
            in_fedora_section=true
            echo "$line" >> "$temp_file"
        elif [[ "$in_fedora_section" == true && "$line" =~ ^[[:space:]]*dnf:[[:space:]]*$ ]]; then
            # Add repos section before dnf
            echo "    repos:" >> "$temp_file"
            for repo in "${UNIQUE_REPOS[@]}"; do
                echo "      - $repo" >> "$temp_file"
            done
            echo "$line" >> "$temp_file"
            added_repos=true
            in_fedora_section=false
        else
            echo "$line" >> "$temp_file"
            if [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$in_fedora_section" == true ]]; then
                in_fedora_section=false
            fi
        fi
    done < "$file"
    
    mv "$temp_file" "$file"
}

# Update manifest files
if [[ "$USE_BREW" == true ]]; then
    print_color "$BLUE" "üîÑ Updating brew manifest..."
    update_brew_manifest "$YAML_FILE"
fi

if [[ "$USE_NATIVE" == true ]]; then
    NATIVE_YAML_FILE=""
    if [[ -n "${DOTS:-}" ]]; then
        NATIVE_YAML_FILE="$DOTS/.chezmoidata/pkgs.yml"
    else
        NATIVE_YAML_FILE="$HOME/.local/share/chezmoi/home/.chezmoidata/pkgs.yml"
    fi
    
    if [[ -f "$NATIVE_YAML_FILE" ]]; then
        print_color "$BLUE" "üîÑ Updating native package manifest..."
        update_native_manifest "$NATIVE_YAML_FILE"
        
        # Add repos section if we have unique repos
        if [[ "$NATIVE_PKG_MANAGER" == "dnf" && ${#UNIQUE_REPOS[@]} -gt 0 ]]; then
            add_repos_section "$NATIVE_YAML_FILE"
        fi
    fi
fi

# Store original file for comparison
ORIGINAL_PACKAGES=$(mktemp)
if [[ "$USE_BREW" == true ]]; then
    # Extract current packages from original file
    grep -E "^[[:space:]]*-[[:space:]]+" "$BACKUP_PATH" | sed 's/^[[:space:]]*-[[:space:]]*//' | sort > "$ORIGINAL_PACKAGES"
else
    grep -E "^[[:space:]]*-[[:space:]]+" "$BACKUP_PATH" | sed 's/^[[:space:]]*-[[:space:]]*//' | sort > "$ORIGINAL_PACKAGES"
fi

# Deduplication using gawk
gawk '
BEGIN {
    in_list = 0
    current_section = ""
}
/^[[:space:]]*-[[:space:]]+/ {
    if (in_list) {
        # Extract package name
        gsub(/^[[:space:]]*-[[:space:]]+/, "")
        pkg = $0
        if (!(current_section SUBSEP pkg in seen)) {
            packages[current_section][++count[current_section]] = pkg
            seen[current_section SUBSEP pkg] = 1
        }
        next
    }
}
/^[[:space:]]*[a-zA-Z][a-zA-Z0-9_-]*:[[:space:]]*$/ {
    # Print any accumulated packages from previous section
    if (in_list && current_section != "") {
        # Sort and print packages for the previous section
        n = asort(packages[current_section], sorted_pkgs)
        for (i = 1; i <= n; i++) {
            print "      - " sorted_pkgs[i]
        }
        delete packages[current_section]
        count[current_section] = 0
    }

    # Check if this line indicates start of a package list section
    if (/^[[:space:]]*(brews|casks|pacman|dnf):[[:space:]]*$/) {
        in_list = 1
        current_section = $0
        print $0
        next
    } else {
        in_list = 0
        current_section = ""
    }
}
{
    # For non-package lines, just print them
    if (!in_list || !/^[[:space:]]*-[[:space:]]+/) {
        print $0
    }
}
END {
    # Print any remaining packages from the last section
    if (in_list && current_section != "") {
        n = asort(packages[current_section], sorted_pkgs)
        for (i = 1; i <= n; i++) {
            print "      - " sorted_pkgs[i]
        }
    }
}
' "$YAML_FILE" > "$YAML_FILE.tmp" && mv "$YAML_FILE.tmp" "$YAML_FILE"

# Compare before and after to show actual changes
NEW_PACKAGES=$(mktemp)
if [[ "$USE_BREW" == true ]]; then
    grep -E "^[[:space:]]*-[[:space:]]+" "$YAML_FILE" | sed 's/^[[:space:]]*-[[:space:]]*//' | sort > "$NEW_PACKAGES"
else
    grep -E "^[[:space:]]*-[[:space:]]+" "$YAML_FILE" | sed 's/^[[:space:]]*-[[:space:]]*//' | sort > "$NEW_PACKAGES"
fi

# Find actual additions and removals
ACTUAL_ADDED=$(mktemp)
ACTUAL_REMOVED=$(mktemp)
comm -13 "$ORIGINAL_PACKAGES" "$NEW_PACKAGES" > "$ACTUAL_ADDED"
comm -23 "$ORIGINAL_PACKAGES" "$NEW_PACKAGES" > "$ACTUAL_REMOVED"

# Report actual changes
ADDED_COUNT=$(wc -l < "$ACTUAL_ADDED" | tr -d ' ')
REMOVED_COUNT=$(wc -l < "$ACTUAL_REMOVED" | tr -d ' ')

if [[ "$ADDED_COUNT" -gt 0 ]]; then
    if [[ "$USE_BREW" == true ]]; then
        print_color "$GREEN" "‚úÖ Added $ADDED_COUNT new packages:"
    else
        print_color "$GREEN" "‚úÖ Added $ADDED_COUNT new $PKG_MANAGER packages:"
    fi
    while IFS= read -r pkg; do
        print_color "$CYAN" "  + $pkg"
    done < "$ACTUAL_ADDED"
fi

if [[ "$REMOVED_COUNT" -gt 0 ]]; then
    if [[ "$USE_BREW" == true ]]; then
        print_color "$GREEN" "‚úÖ Removed $REMOVED_COUNT uninstalled packages:"
    else
        print_color "$GREEN" "‚úÖ Removed $REMOVED_COUNT uninstalled packages:"
    fi
    while IFS= read -r pkg; do
        print_color "$RED" "  - $pkg"
    done < "$ACTUAL_REMOVED"
fi

if [[ "$ADDED_COUNT" -eq 0 && "$REMOVED_COUNT" -eq 0 ]]; then
    print_color "$GREEN" "‚úÖ No changes needed - manifest is up to date"
fi

# Cleanup temp files
rm -f "$ORIGINAL_PACKAGES" "$NEW_PACKAGES" "$ACTUAL_ADDED" "$ACTUAL_REMOVED"


echo ""
print_color "$GREEN" "‚ú® DONE! Run 'chezmoi apply' to apply your changes."
