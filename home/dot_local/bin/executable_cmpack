#!/bin/bash

set -eo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

# Usage function
usage() {
    cat << EOF
$(print_color "$CYAN" "cmpack - Chezmoi Package Manager")

$(print_color "$GREEN" "USAGE:")
    cmpack [OPTIONS]

$(print_color "$GREEN" "OPTIONS:")
    (no args)           Sync current host's packages with manifest
    -l, --list          List all configured hosts in pkgs.yml
    -s, --show HOST     Show packages configured for a specific host
    -c, --clone HOST    Install packages from another host to current machine
    -d, --diff HOST     Show package differences between current host and target
    -i, --init HOST     Initialize current hostname in pkgs.yml using HOST as template
    -h, --help          Show this help message

$(print_color "$GREEN" "EXAMPLES:")
    cmpack                              # Sync current host's packages
    cmpack --list                       # List all configured hosts
    cmpack --show <host>                # Show packages for a given host
    cmpack --clone <host>               # Install all packages from template
    cmpack --diff mba                   # Compare current host with mba

$(print_color "$GREEN" "WORKFLOW:")
    1. On a new machine: cmpack --clone <similar-host>
    2. Install additional packages with your package manager
    3. Run cmpack to add new packages to manifest under your hostname
    4. Your hostname is now tracked in pkgs.yml

EOF
    exit 0
}

# Parse command line arguments
MODE="sync"
TARGET_HOST=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--list)
            MODE="list"
            shift
            ;;
        -s|--show)
            MODE="show"
            TARGET_HOST="$2"
            shift 2
            ;;
        -c|--clone)
            MODE="clone"
            TARGET_HOST="$2"
            shift 2
            ;;
        -d|--diff)
            MODE="diff"
            TARGET_HOST="$2"
            shift 2
            ;;
        -i|--init)
            MODE="init"
            TARGET_HOST="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            print_color "$RED" "‚ùå Unknown option: $1"
            usage
            ;;
    esac
done

# Validate required arguments for certain modes
if [[ "$MODE" =~ ^(show|clone|diff|init)$ ]] && [[ -z "$TARGET_HOST" ]]; then
    print_color "$RED" "‚ùå --${MODE} requires a hostname argument"
    usage
fi

# Detect OS and distribution
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
PKG_MANAGER=""
HOSTNAME=$(hostname)
USE_BREW=false
USE_NATIVE=false
NATIVE_PKG_MANAGER=""

if [[ "$OS" == "darwin" ]]; then
    PKG_MANAGER="brew"
    USE_BREW=true
elif [[ "$OS" == "linux" ]]; then
    if [[ -f /etc/arch-release ]] || [[ -f /etc/os-release && $(grep -E '^ID=arch$' /etc/os-release) ]]; then
        NATIVE_PKG_MANAGER="pacman"
        USE_NATIVE=true
        PKG_MANAGER="$NATIVE_PKG_MANAGER"
    elif [[ -f /etc/fedora-release ]] || [[ -f /etc/os-release && $(grep -E '^ID=fedora$' /etc/os-release) ]]; then
        NATIVE_PKG_MANAGER="dnf"
        USE_NATIVE=true
        PKG_MANAGER="$NATIVE_PKG_MANAGER"
    else
        print_color "$RED" "‚ùå Only Arch Linux and Fedora are supported on Linux systems"
        exit 1
    fi
else
    print_color "$RED" "‚ùå Unsupported operating system: $OS (only Darwin, Arch, and Fedora are supported)"
    exit 1
fi

# Determine the manifest file path
if [[ -n "${DOTS:-}" ]]; then
    YAML_FILE="$DOTS/.chezmoidata/pkgs.yml"
else
    YAML_FILE="$HOME/.local/share/chezmoi/home/.chezmoidata/pkgs.yml"
fi

if [[ ! -f "$YAML_FILE" ]]; then
    print_color "$RED" "‚ùå Manifest file not found at: $YAML_FILE"
    exit 1
fi

# Function to list all configured hosts
list_hosts() {
    print_color "$BLUE" "üìã Configured hosts in pkgs.yml:"
    echo ""

    local hosts=()
    local in_hosts_section=false

    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]*hosts:[[:space:]]*$ ]]; then
            in_hosts_section=true
            continue
        elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z0-9_-]+:[[:space:]]*$ ]] && [[ "$in_hosts_section" == false ]]; then
            continue
        elif [[ "$line" =~ ^[[:space:]]{4}([a-zA-Z0-9_-]+):[[:space:]]*$ ]] && [[ "$in_hosts_section" == true ]]; then
            local hostname="${BASH_REMATCH[1]}"
            hosts+=("$hostname")
        elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$in_hosts_section" == true ]]; then
            # End of hosts section
            break
        fi
    done < "$YAML_FILE"

    if [[ ${#hosts[@]} -eq 0 ]]; then
        print_color "$YELLOW" "No hosts configured yet"
        return
    fi

    for host in "${hosts[@]}"; do
        local pkg_count=0
        local os_type=""

        # Determine OS type and count packages
        if grep -A 100 "^[[:space:]]*${host}:" "$YAML_FILE" | grep -q "brews:"; then
            os_type="darwin"
            local brew_count=$(grep -A 1000 "^[[:space:]]*${host}:" "$YAML_FILE" | sed -n '/brews:/,/^[[:space:]]*[a-z]/p' | grep -c "^[[:space:]]*-")
            local cask_count=$(grep -A 1000 "^[[:space:]]*${host}:" "$YAML_FILE" | sed -n '/casks:/,/^[[:space:]]*[a-z]/p' | grep -c "^[[:space:]]*-")
            pkg_count=$((brew_count + cask_count))
        elif grep -A 100 "^[[:space:]]*${host}:" "$YAML_FILE" | grep -q "pacman:"; then
            os_type="arch"
            pkg_count=$(grep -A 1000 "^[[:space:]]*${host}:" "$YAML_FILE" | sed -n '/pacman:/,/^[[:space:]]*[a-z]/p' | grep -c "^[[:space:]]*-")
        elif grep -A 100 "^[[:space:]]*${host}:" "$YAML_FILE" | grep -q "scoop:"; then
            os_type="windows"
            pkg_count=$(grep -A 1000 "^[[:space:]]*${host}:" "$YAML_FILE" | sed -n '/apps:/,/^[[:space:]]*[a-z]/p' | grep -c "^[[:space:]]*-")
        fi

        local marker=""
        if [[ "$host" == "$HOSTNAME" ]]; then
            marker=" $(print_color "$GREEN" "‚Üê current")"
        fi

        printf "  $(print_color "$CYAN" "%-30s") $(print_color "$GRAY" "%-10s") $(print_color "$YELLOW" "%d packages")%s\n" "$host" "($os_type)" "$pkg_count" "$marker"
    done
}

# Function to show packages for a specific host
show_host() {
    local target="$1"
    print_color "$BLUE" "üì¶ Packages configured for host: $target"
    echo ""

    local in_target=false
    local in_section=false
    local section_name=""

    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]{4}${target}:[[:space:]]*$ ]]; then
            in_target=true
            continue
        elif [[ "$line" =~ ^[[:space:]]{4}[a-zA-Z0-9_-]+:[[:space:]]*$ ]] && [[ "$in_target" == true ]]; then
            # Different host - stop
            break
        elif [[ "$in_target" == true ]] && [[ "$line" =~ ^[[:space:]]{6}([a-z]+):[[:space:]]*$ ]]; then
            section_name="${BASH_REMATCH[1]}"
            in_section=true
            print_color "$GREEN" "\n${section_name}:"
            continue
        elif [[ "$in_section" == true ]] && [[ "$line" =~ ^[[:space:]]{8}-[[:space:]]+(.+)$ ]]; then
            echo "  - ${BASH_REMATCH[1]}"
        elif [[ "$in_target" == true ]] && [[ "$line" =~ ^[[:space:]]{6}[a-z]+:[[:space:]]*$ ]]; then
            in_section=false
        elif [[ "$line" =~ ^[[:space:]]*[a-zA-Z]+:[[:space:]]*$ ]] && [[ "$in_target" == true ]]; then
            # End of target section
            break
        fi
    done < "$YAML_FILE"
}

# Function to clone packages from another host
clone_host() {
    local target="$1"
    print_color "$BLUE" "üîÑ Cloning package configuration from: $target"

    # Check if target exists
    if ! grep -q "^[[:space:]]*${target}:" "$YAML_FILE"; then
        print_color "$RED" "‚ùå Host '$target' not found in pkgs.yml"
        return 1
    fi

    # Extract packages from target host
    local packages=()
    local in_target=false
    local in_packages=false

    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]{4}${target}:[[:space:]]*$ ]]; then
            in_target=true
        elif [[ "$in_target" == true ]] && [[ "$line" =~ ^[[:space:]]{6}(brews|casks|pacman|apps):[[:space:]]*$ ]]; then
            in_packages=true
        elif [[ "$in_packages" == true ]] && [[ "$line" =~ ^[[:space:]]{8}-[[:space:]]+(.+)$ ]]; then
            packages+=("${BASH_REMATCH[1]}")
        elif [[ "$in_target" == true ]] && [[ "$line" =~ ^[[:space:]]{4}[a-zA-Z0-9_-]+:[[:space:]]*$ ]]; then
            break
        elif [[ "$in_packages" == true ]] && [[ "$line" =~ ^[[:space:]]{6}[a-z]+:[[:space:]]*$ ]]; then
            in_packages=false
        fi
    done < "$YAML_FILE"

    print_color "$CYAN" "üì¶ Found ${#packages[@]} packages from $target"

    # Install packages based on OS
    if [[ "$USE_BREW" == true ]]; then
        print_color "$BLUE" "üç∫ Installing via Homebrew..."
        for pkg in "${packages[@]}"; do
            if [[ "$pkg" == *"/"* ]] || [[ "$pkg" == *"-"*"font"* ]]; then
                brew install --cask "$pkg" 2>/dev/null || brew install "$pkg"
            else
                brew install "$pkg"
            fi
        done
    elif [[ "$NATIVE_PKG_MANAGER" == "pacman" ]]; then
        print_color "$BLUE" "üì¶ Installing via pacman/yay..."
        yay -S --needed --noconfirm "${packages[@]}"
    fi

    print_color "$GREEN" "‚úÖ Clone complete! Run 'cmpack' to register this as a new host."
}

# MODE: list
if [[ "$MODE" == "list" ]]; then
    list_hosts
    exit 0
fi

# MODE: show
if [[ "$MODE" == "show" ]]; then
    show_host "$TARGET_HOST"
    exit 0
fi

# MODE: clone
if [[ "$MODE" == "clone" ]]; then
    clone_host "$TARGET_HOST"
    exit 0
fi

# MODE: diff
if [[ "$MODE" == "diff" ]]; then
    print_color "$BLUE" "üîç Comparing $HOSTNAME with $TARGET_HOST"
    # TODO: Implement diff logic
    print_color "$YELLOW" "‚ö†Ô∏è  Diff functionality coming soon"
    exit 0
fi

# MODE: init
if [[ "$MODE" == "init" ]]; then
    print_color "$BLUE" "üÜï Initializing $HOSTNAME using $TARGET_HOST as template"
    # TODO: Implement init logic
    print_color "$YELLOW" "‚ö†Ô∏è  Init functionality coming soon"
    exit 0
fi

# ========== MODE: sync (default) ==========

# Check if package manager is installed
if ! command -v "$PKG_MANAGER" &> /dev/null; then
    if [[ "$PKG_MANAGER" == "brew" ]]; then
        if [[ -x "/opt/homebrew/bin/brew" ]] || [[ -x "/usr/local/bin/brew" ]]; then
            if [[ -x "/opt/homebrew/bin/brew" ]]; then
                HOMEBREW_PREFIX="/opt/homebrew"
            else
                HOMEBREW_PREFIX="/usr/local"
            fi

            case "${SHELL}" in
                */bash*) shell_rcfile="${HOME}/.bash_profile" ;;
                */zsh*) shell_rcfile="${HOME}/.zprofile" ;;
                */fish*) shell_rcfile="${HOME}/.config/fish/config.fish" ;;
                *) shell_rcfile="${HOME}/.profile" ;;
            esac

            print_color "$YELLOW" "‚ö†Ô∏è  Homebrew is installed but not in PATH."
            print_color "$CYAN" "Run: eval \"\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\""
        else
            print_color "$RED" "‚ùå Homebrew not found. Install it with:"
            print_color "$CYAN" '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
        fi
    else
        print_color "$RED" "‚ùå Package manager '$PKG_MANAGER' not found."
    fi
    exit 1
fi

# Create backup
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_DIR="$HOME/.config/chezmoi/backups"
mkdir -p "$BACKUP_DIR"
BACKUP_FILENAME=$(basename "$YAML_FILE")
BACKUP_PATH="$BACKUP_DIR/${BACKUP_FILENAME}.bak.$TIMESTAMP"
cp "$YAML_FILE" "$BACKUP_PATH"

# Clean up old backups (keep only the 10 most recent)
MAX_BACKUPS=10
if ls "$BACKUP_DIR"/${BACKUP_FILENAME}.bak.* >/dev/null 2>&1; then
    BACKUP_COUNT=$(ls -1 "$BACKUP_DIR"/${BACKUP_FILENAME}.bak.* | wc -l)
    if [[ $BACKUP_COUNT -gt $MAX_BACKUPS ]]; then
        EXCESS_COUNT=$((BACKUP_COUNT - MAX_BACKUPS))
        ls -1t "$BACKUP_DIR"/${BACKUP_FILENAME}.bak.* | tail -n $EXCESS_COUNT | xargs rm -f
    fi
fi

# Get currently installed packages
INSTALLED_BREWS=()
INSTALLED_CASKS=()
INSTALLED_NATIVE=()

if [[ "$OS" == "darwin" ]]; then
    print_color "$BLUE" "üîç Getting installed brew packages..."
    INSTALLED_BREWS=($(brew leaves))
    INSTALLED_CASKS=($(brew list --cask))
    print_color "$CYAN" "Found ${#INSTALLED_BREWS[@]} formulas and ${#INSTALLED_CASKS[@]} casks"
fi

if [[ "$OS" == "linux" ]]; then
    print_color "$BLUE" "üîç Getting installed $NATIVE_PKG_MANAGER packages..."

    case "$NATIVE_PKG_MANAGER" in
        pacman)
            INSTALLED_NATIVE=($(pacman -Qe | awk '{print $1}' | sort))
            ;;
        dnf)
            INSTALLED_NATIVE=($(dnf repoquery --userinstalled --qf '%{name}' | sort | uniq))
            ;;
    esac

    print_color "$CYAN" "Found ${#INSTALLED_NATIVE[@]} $NATIVE_PKG_MANAGER packages"
fi

# Parse current manifest to get existing packages for this host
CURRENT_BREWS=()
CURRENT_CASKS=()
CURRENT_NATIVE=()

# Check if current hostname exists in manifest
HOST_EXISTS=false
if grep -q "^[[:space:]]*${HOSTNAME}:" "$YAML_FILE"; then
    HOST_EXISTS=true
fi

if [[ "$HOST_EXISTS" == false ]]; then
    print_color "$YELLOW" "‚ö†Ô∏è  Host '$HOSTNAME' not found in pkgs.yml"
    print_color "$BLUE" "üí° Tip: Use 'cmpack --clone <hostname>' to bootstrap from an existing host"
    print_color "$BLUE" "    Or continue to create a new host entry with your current packages"
    echo ""
fi

# Parse packages for current hostname if it exists
if [[ "$HOST_EXISTS" == true ]]; then
    local in_host=false
    local in_section=false
    local section_type=""

    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]{4}${HOSTNAME}:[[:space:]]*$ ]]; then
            in_host=true
        elif [[ "$in_host" == true ]] && [[ "$line" =~ ^[[:space:]]{6}(brews|casks|pacman):[[:space:]]*$ ]]; then
            section_type="${BASH_REMATCH[1]}"
            in_section=true
        elif [[ "$in_section" == true ]] && [[ "$line" =~ ^[[:space:]]{8}-[[:space:]]+(.+)$ ]]; then
            local pkg="${BASH_REMATCH[1]}"
            case "$section_type" in
                brews) CURRENT_BREWS+=("$pkg") ;;
                casks) CURRENT_CASKS+=("$pkg") ;;
                pacman) CURRENT_NATIVE+=("$pkg") ;;
            esac
        elif [[ "$in_host" == true ]] && [[ "$line" =~ ^[[:space:]]{4}[a-zA-Z0-9_-]+:[[:space:]]*$ ]]; then
            break
        elif [[ "$in_section" == true ]] && [[ "$line" =~ ^[[:space:]]{6}[a-z]+:[[:space:]]*$ ]]; then
            in_section=false
        fi
    done < "$YAML_FILE"
fi

# Find differences
NEW_BREWS=()
NEW_CASKS=()
NEW_NATIVE=()
REMOVED_BREWS=()
REMOVED_CASKS=()
REMOVED_NATIVE=()

# Packages to exclude from tracking (regex patterns)
EXCLUDED_PATTERNS=(
    "^kmod-.*"
    "^kernel-.*"
)

should_exclude_package() {
    local pkg="$1"
    for pattern in "${EXCLUDED_PATTERNS[@]}"; do
        if [[ "$pkg" =~ $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# Find new packages
if [[ "$OS" == "darwin" ]]; then
    for pkg in "${INSTALLED_BREWS[@]}"; do
        if [[ ! " ${CURRENT_BREWS[*]:-} " =~ " ${pkg} " ]]; then
            NEW_BREWS+=("$pkg")
        fi
    done

    for pkg in "${INSTALLED_CASKS[@]}"; do
        if [[ ! " ${CURRENT_CASKS[*]:-} " =~ " ${pkg} " ]]; then
            NEW_CASKS+=("$pkg")
        fi
    done
fi

if [[ "$OS" == "linux" ]]; then
    for pkg in "${INSTALLED_NATIVE[@]}"; do
        if [[ ! " ${CURRENT_NATIVE[*]:-} " =~ " ${pkg} " ]] && ! should_exclude_package "$pkg"; then
            NEW_NATIVE+=("$pkg")
        fi
    done
fi

# Find removed packages
if [[ "$OS" == "darwin" ]]; then
    for pkg in "${CURRENT_BREWS[@]}"; do
        if [[ ! " ${INSTALLED_BREWS[*]:-} " =~ " ${pkg} " ]]; then
            REMOVED_BREWS+=("$pkg")
        fi
    done

    for pkg in "${CURRENT_CASKS[@]}"; do
        if [[ ! " ${INSTALLED_CASKS[*]:-} " =~ " ${pkg} " ]]; then
            REMOVED_CASKS+=("$pkg")
        fi
    done
fi

if [[ "$OS" == "linux" ]]; then
    for pkg in "${CURRENT_NATIVE[@]}"; do
        if [[ ! " ${INSTALLED_NATIVE[*]:-} " =~ " ${pkg} " ]] && ! should_exclude_package "$pkg"; then
            REMOVED_NATIVE+=("$pkg")
        fi
    done
fi

# Check if any changes are needed
if [[ ${#NEW_BREWS[@]} -eq 0 && ${#NEW_CASKS[@]} -eq 0 && ${#NEW_NATIVE[@]} -eq 0 && ${#REMOVED_BREWS[@]} -eq 0 && ${#REMOVED_CASKS[@]} -eq 0 && ${#REMOVED_NATIVE[@]} -eq 0 ]]; then
    print_color "$GREEN" "‚úÖ No changes needed - manifest is up to date"
    exit 0
fi

# If host doesn't exist, create entry
if [[ "$HOST_EXISTS" == false ]]; then
    print_color "$BLUE" "üÜï Creating new host entry for: $HOSTNAME"

    # Find the hosts section and add new host
    local temp_file="$(mktemp)"
    local in_hosts=false
    local added=false

    while IFS= read -r line; do
        echo "$line" >> "$temp_file"

        if [[ "$line" =~ ^[[:space:]]*hosts:[[:space:]]*$ ]]; then
            in_hosts=true
        elif [[ "$in_hosts" == true ]] && [[ ! "$added" == true ]] && [[ "$line" =~ ^[[:space:]]{4}[a-zA-Z0-9_-]+:[[:space:]]*$ ]]; then
            # Add new host before first existing host
            echo "    # $(date +%Y-%m-%d) - Auto-created for $HOSTNAME" >> "$temp_file"
            echo "    $HOSTNAME:" >> "$temp_file"

            if [[ "$OS" == "darwin" ]]; then
                echo "      brews:" >> "$temp_file"
                for pkg in "${NEW_BREWS[@]}"; do
                    echo "        - $pkg" >> "$temp_file"
                done
                echo "      casks:" >> "$temp_file"
                for pkg in "${NEW_CASKS[@]}"; do
                    echo "        - $pkg" >> "$temp_file"
                done
            elif [[ "$OS" == "linux" ]]; then
                echo "      pacman:" >> "$temp_file"
                for pkg in "${NEW_NATIVE[@]}"; do
                    echo "        - $pkg" >> "$temp_file"
                done
            fi
            echo "" >> "$temp_file"
            added=true
        fi
    done < "$YAML_FILE"

    mv "$temp_file" "$YAML_FILE"

    print_color "$GREEN" "‚úÖ Added ${#NEW_BREWS[@]}${#NEW_CASKS[@]}${#NEW_NATIVE[@]} packages under host '$HOSTNAME'"
    print_color "$CYAN" "Run 'chezmoi apply' to sync your changes"
    exit 0
fi

# Update existing host entry
print_color "$BLUE" "üîÑ Updating manifest for host: $HOSTNAME"

# TODO: Implement update logic for existing hosts
print_color "$YELLOW" "‚ö†Ô∏è  Update logic for existing hosts coming soon"
print_color "$CYAN" "New packages found: ${#NEW_BREWS[@]} brews, ${#NEW_CASKS[@]} casks, ${#NEW_NATIVE[@]} native"
print_color "$CYAN" "Removed packages: ${#REMOVED_BREWS[@]} brews, ${#REMOVED_CASKS[@]} casks, ${#REMOVED_NATIVE[@]} native"

echo ""
print_color "$GREEN" "‚ú® DONE! Run 'chezmoi apply' to apply your changes."
