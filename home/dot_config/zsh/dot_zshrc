# 🐶 FastFetch
if [[ -o interactive && "$TERM_PROGRAM" != "vscode" ]]; then
  fastfetch
fi

# 🚬 source
[ -f "${HOME}/.config/shared/init.sh" ] && source "${HOME}/.config/shared/init.sh"

if [ -d "$ZDOTDIR/lib" ]; then
  for file in "$ZDOTDIR/lib/"*.zsh; do
    source "$file"
  done
  unset file
fi

setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt inc_append_history # save history entries as soon as they are entered
setopt share_history # share history between different instances of the shell
setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt auto_cd
setopt multios
setopt completealiases
setopt prompt_subst
setopt interactive_comments # allow comments in interactive shells
unsetopt beep

# 🚀 zinit
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

_fix-omz-plugin() {
  if [[ ! -f ._zinit/teleid ]] then return 0; fi
  if [[ ! $(cat ._zinit/teleid) =~ "^OMZP::.*" ]] then return 0; fi
  local OMZP_NAME=$(cat ._zinit/teleid | sed -n 's/OMZP:://p')
  git clone --quiet --no-checkout --depth=1 --filter=tree:0 https://github.com/ohmyzsh/ohmyzsh
  cd ohmyzsh
  git sparse-checkout set --no-cone plugins/$OMZP_NAME
  git checkout --quiet
  cd ..
  local OMZP_PATH="ohmyzsh/plugins/$OMZP_NAME"
  local file
  for file in ohmyzsh/plugins/$OMZP_NAME/*~(.gitignore|*.plugin.zsh)(D); do
    local filename="${file:t}"
    echo "Copying $file to $(pwd)/$filename..."
    cp -r $file $filename
  done
  rm -rf ohmyzsh
}

function omzPlugin() {
  zinit ice atpull"%atclone" atclone"_fix-omz-plugin" lucid $2
  zinit snippet OMZP::$1
}

function omzLib() {
  zinit wait'!' lucid for OMZL::$1
}

omzLib completion.zsh
omzLib correction.zsh
omzLib directories.zsh
omzLib clipboard.zsh
omzLib git.zsh
omzLib grep.zsh
omzLib history.zsh
omzLib key-bindings.zsh
omzLib completion.zsh

if [[ `uname` == "Darwin" ]]; then
    omzPlugin macos
fi

omzPlugin iterm2
omzPlugin ssh-agent
omzPlugin sudo
omzPlugin cp
omzPlugin rsync wait"1"
omzPlugin gpg-agent
omzPlugin git
omzPlugin eza
omzPlugin rsync
omzPlugin systemd
omzPlugin git-flow wait"1"
omzPlugin github wait"1"
omzPlugin 1password wait"1"
omzPlugin z
omzPlugin fasd
omzPlugin fzf
omzPlugin mise
omzPlugin docker wait"1"
omzPlugin command-not-found wait"1"
omzPlugin common-aliases
omzPlugin compleat wait"1"
omzPlugin colorize wait"1"

# git-extras
zinit ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX"
zinit light tj/git-extras

# direnv
zinit ice as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' \
    atpull'%atclone' pick"direnv" src"zhook.zsh"
zinit light direnv/direnv

# enhancd
zinit ice as"program" pick"init.zsh" wait"2" lucid
zinit light b4b4r07/enhancd

# pyenv
zplugin lucid as'command' pick'bin/pyenv' atinit'export PYENV_ROOT="$PWD"' \
    atclone'PYENV_ROOT="$PWD" ./libexec/pyenv init - > zpyenv.zsh' \
    atpull"%atclone" src"zpyenv.zsh" nocompile'!' for \
        pyenv/pyenv

# poetry
zinit ice pick'poetry.zsh' wait"2" lucid
zinit light darvid/zsh-poetry

# fzf-fasd
zinit ice wait"1" lucid
zinit light wookayin/fzf-fasd

# navi
zinit ice wait"1" lucid
zinit light denisidoro/navi

# thefuck
zinit ice wait"1" lucid
zinit light laggardkernel/zsh-thefuck

# Docker completions
zinit wait lucid as"completion" for \
    OMZP::docker/completions/_docker \
    OMZP::docker-compose/_docker-compose

zinit ice as"command" from"gh-r" bpick"atuin-*.tar.gz" mv"atuin*/atuin -> atuin" \
  atclone"./atuin init zsh > init.zsh --disable-up-arrow --disable-ctrl-r; ./atuin gen-completions --shell zsh > _atuin" \
  atpull"%atclone" src"init.zsh"
zinit light atuinsh/atuin

zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay" \
      z-shell/F-Sy-H \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions

zinit light zsh-users/zsh-history-substring-search

zinit ice wait"1" lucid
zinit load zdharma-continuum/history-search-multi-word

zinit ice lucid wait'0c' multisrc'shell/{completion,key-bindings}.zsh' id-as'junegunn/fzf_completions' pick'/dev/null'
zinit light junegunn/fzf
zinit ice wait'1' lucid
zinit light hlissner/zsh-autopair
zinit light Aloxaf/fzf-tab

[ -d "${ZDOTDIR}/functions" ] && fpath+=${ZDOTDIR}/functions
[ -d "${ZDOTDIR}/completions" ] && fpath+=${ZDOTDIR}/completions

autoload -Uz compinit
compinit
zicompinit
zinit cdreplay -q # <- execute compdefs provided by rest of plugins
#zinit cdlist # look at gathered compdefs

[ -z "$HISTFILE" ] && HISTFILE="$XDG_STATE_HOME"/zsh/history
HISTSIZE=290000
SAVEHIST=$HISTSIZE
setopt INC_APPEND_HISTORY   # Immediately append commands to history file.
setopt HIST_IGNORE_ALL_DUPS # Never add duplicate entries.
setopt HIST_IGNORE_SPACE    # Ignore commands that start with a space.
setopt HIST_REDUCE_BLANKS   # Remove unnecessary blank lines.

autoload -Uz is-at-least
# ls colors
autoload -U colors && colors


zstyle ":completion:*" menu select=2
zstyle ":completion:*" auto-description "specify: %d"
zstyle ":completion:*" completer _expand _complete _correct _approximate
zstyle ":completion:*" format "Completing %d"
zstyle ":completion:*" group-name ""

zstyle ":completion:*:default" list-colors '${(s.:.)LS_COLORS}'
zstyle ":completion:*" list-colors ""
zstyle ":completion:*" list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ":completion:*" matcher-list "" "m:{a-z}={A-Z}" "m:{a-zA-Z}={A-Za-z}" "r:|[._-]=* r:|=* l:|=*"
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ":completion:*" use-compctl false
zstyle ":completion:*" verbose true

zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
zstyle ':fzf-tab:*' use-fzf-default-opts yes
zstyle ':fzf-tab:*' switch-group ',' '.'
zstyle ':completion:*:eza' file-sort modification
zstyle ':completion:*:eza' sort false
zstyle ':completion:*' completer _expand _complete _ignored _approximate

bindkey -v

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey "\e[1~" beginning-of-line
bindkey "\e[H" beginning-of-line
bindkey "\e[7~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\e[F" end-of-line
bindkey "\e[8~" end-of-line
bindkey "\e[3~" delete-char


export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=true
MATCH_PREV_CM=true
COMPLETION_WAITING_DOTS="true"


if [[ `uname` == "Darwin" ]]; then
  # 1Password
  OP_BIOMETRIC_UNLOCK_ENABLED=true
fi

if [[ -v commands[zoxide] ]]; then
  eval "$(zoxide init zsh --cmd cd)"
fi

if [[ -n "$SSH_CONNECTION" ]]; then
  export DISPLAY=wini:0
fi

if [ "$VSCODE_INJECTION" = "1" ]; then
  export EDITOR="code --wait"
fi

if [[ -v commands[mise] ]]; then
  eval "$(mise activate zsh)"
fi

# 🐚 Prompt
if [[ -v commands['oh-my-posh'] ]]; then
  eval "$(oh-my-posh init zsh --config $HOME/.config/zen.toml)"
elif [[ -v commands[starship] ]]; then
  eval "$(starship init zsh)"
fi
