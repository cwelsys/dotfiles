alias:
  - name: c
    value: clear
  - name: ld
    value: lazydocker
  - name: lg
    value: lazygit
  - name: lj
    value: lazyjournal
  - name: ff
    value: fastfetch
  - name: mg
    value: magick
  - name: tg
    value: topgrade
  - name: rl
    type: function
    value: |
      {{"{{"}} if eq .Shell "pwsh" {{"}}"}}
        Import-Profile
      {{"{{"}} else {{"}}"}}
        exec $SHELL -l
      {{"{{"}} end {{"}}"}}
  - name: vi
    value: nvim
  - name: vim
    value: nvim
  - name: cdc
    value: |
      {{"{{"}} if eq .Shell "pwsh" {{"}}"}}
        cd {{"{{"}} .Home {{"}}"}}\.config
      {{"{{"}} else {{"}}"}}
        cd ~/.config
      {{"{{"}} end {{"}}"}}
  - name: cdcm
    value: cd {{"{{"}} env "DOTS" {{"}}"}}
    type: function
  {{ if .isWSL -}}
  - name: cdw
    value: cd {{"{{"}} env "WIN_HOME" {{"}}"}}
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    {{- end }}
  - name: qq
    value: |
      {{"{{"}} if eq .Shell "pwsh" {{"}}"}}
        exit
      {{"{{"}} else {{"}}"}}
      {
        exit
      }
      {{"{{"}} end {{"}}"}}

  - name: rcp
    value: rsync --recursive --times --progress --stats --human-readable
    if: "{{"{{"}} hasCommand \"rsync\" {{"}}"}}"
  - name: rmv
    value: rsync --recursive --times --progress --stats --human-readable --remove-source-files
    if: "{{"{{"}} hasCommand \"rsync\" {{"}}"}}"
  - name: e
    value: Invoke-Item .
    type: function
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: e
    value: open .
    type: function
    if: "{{"{{"}} match .OS \"darwin\" {{"}}"}}"
  - name: e
    value: xdg-open .
    type: function
    if: "{{"{{"}} match .OS \"linux\" {{"}}"}}"

  - name: cma
    value: chezmoi add
  - name: cme
    value: chezmoi edit
  - name: cmu
    value: chezmoi update
  - name: cmapl
    value: chezmoi apply
  - name: cmra
    value: chezmoi re-add
  - name: cat
    value: bat --paging=never --style=plain
  - name: cpu
    value: fastfetch --logo none --structure cpu
  - name: gpu
    value: fastfetch --logo none --structure gpu
  - name: ram
    value: fastfetch --logo none --structure memory
  - name: osinfo
    value: fastfetch --logo none --structure os
  - name: sysinfo
    value: fastfetch -c all
  - name: mobo
    value: fastfetch --logo none --structure board

  - name: ls
    value: eza --git --group --hyperlink --group-directories-first --time-style=long-iso --color-scale=all --icons -I='*NTUSER.DAT*|*ntuser.dat*|.DS_Store|.idea|.venv|.vs|__pycache__|cache|debug|.git|node_modules|venv'
  - name: l
    value: eza --git-ignore --git --group --hyperlink --group-directories-first --time-style=long-iso --color-scale=all --icons -I='*NTUSER.DAT*|*ntuser.dat*|.DS_Store|.idea|.venv|.vs|__pycache__|cache|debug|.git|node_modules|venv'
  - name: ll
    value: eza --all --header --long --git --group --hyperlink --group-directories-first --time-style=long-iso --color-scale=all --icons -I='*NTUSER.DAT*|*ntuser.dat*|.DS_Store|.idea|.venv|.vs|__pycache__|cache|debug|.git|node_modules|venv'
  - name: la
    value: eza -lbhHigUmuSa
  - name: lo
    value: eza --oneline --git --group --hyperlink --group-directories-first --time-style=long-iso --color-scale=all --icons -I='*NTUSER.DAT*|*ntuser.dat*|.DS_Store|.idea|.venv|.vs|__pycache__|cache|debug|.git|node_modules|venv'
  - name: lx
    value: eza -lbhHigUmuSa@
  - name: tree
    value: eza --tree --git --group --hyperlink --group-directories-first --time-style=long-iso --color-scale=all --icons -I='*NTUSER.DAT*|*ntuser.dat*|.DS_Store|.idea|.venv|.vs|__pycache__|cache|debug|.git|node_modules|venv'
  - name: lt
    value: tree

  # Windows
  - name: zsh
    value: wsl.exe -e zsh
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
  - name: fish
    value: wsl.exe -e fish
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
  - name: su
    value: gsudo
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"

  # pwsh
  - name: os
    value: Out-String
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: keys
    value: Get-PSReadLineKeyHandler
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: clip
    value: Set-Clipboard
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: json
    value: ConvertTo-Json
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: unjson
    value: ConvertFrom-Json
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: GET
    value: Invoke-RestMethodGet
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: HEAD
    value: Invoke-RestMethodHead
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: POST
    value: Invoke-RestMethodPost
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: PUT
    value: Invoke-RestMethodPut
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: DELETE
    value: Invoke-RestMethodDelete
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: TRACE
    value: Invoke-RestMethodTrace
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"
  - name: OPTIONS
    value: Invoke-RestMethodOptions
    if: "{{"{{"}} match .Shell \"pwsh\" {{"}}"}}"

  # Linux
  - name: scl
    value: systemctl
    if: "{{"{{"}} match .OS \"linux\" {{"}}"}}"

  # Package Managers
  - name: npm-ls
    value: npm list -g
  - name: pnpm-ls
    value: pnpm list -g
  - name: bun-ls
    value: bun pm ls -g
  - name: go-ls
    value: go-global-update --dry-runs

    {{ if eq .chezmoi.os "darwin" -}}
  - name: update
    value: brew update && brew upgrade
  - name: install
    value: brew install
  - name: clean
    value: brew cleanup
  - name: remove
    value: brew uninstall
  - name: search
    value: brew search
  - name: info
    value: brew info
  - name: cask-install
    value: brew install --cask
  - name: cask-remove
    value: brew uninstall --cask
    {{- else if eq .chezmoi.os "fedora" }}
  - name: clean
    value: sudo dnf autoremove -y
  - name: update
    value: sudo dnf upgrade -y
  - name: install
    value: sudo dnf install -y
  - name: remove
    value: sudo dnf remove -y
  - name: search
    value: dnf search
  - name: info
    value: dnf info

    {{- else if eq .chezmoi.os "arch" }}
  - name: clean
    value: yay -Yc --noconfirm
  - name: update
    value: yay -Syu --noconfirm
  - name: install
    value: yay -S --needed --noconfirm
  - name: remove
    value: sudo pacman -Rcns --noconfirm
  - name: search
    value: yay -Ss
  - name: info
    value: yay -Si

    {{- else if eq .chezmoi.os "alpine" }}
  - name: update
    value: sudo apk update
  - name: install
    value: sudo apk add
  - name: clean
    value: sudo apk cache clean
  - name: remove
    value: sudo apk del
  - name: search
    value: apk search
  - name: info
    value: apk info

    {{- else if eq .chezmoi.os "opensuse" }}
  - name: update
    value: sudo zypper refresh && sudo zypper update -y
  - name: install
    value: sudo zypper install -y
  - name: clean
    value: sudo zypper clean --all
  - name: remove
    value: sudo zypper remove -y
  - name: search
    value: zypper search
  - name: info
    value: zypper info
    {{- end }}
env:
  - name: DOTS
    value: '{{ .chezmoi.sourceDir }}'
  - name: DOTFILES
    value: '{{ .chezmoi.sourceDir }}'
  - name: BAT_THEME
    value: Catppuccin Mocha
    if: command -v bat >/dev/null 2>&1
  - name: BATDIFF_USE_DELTA
    value: 'true'
    if: command -v bat >/dev/null 2>&1
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: '1'
  - name: SSH_AUTH_SOCK
    value: \\.\pipe\openssh-ssh-agent
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
  - name: TZ
    value: America/New_York
  - name: DOMAIN
    value: cwel.sh
  - name: CASA
    value: cwel.casa
  - name: XDG_CONFIG_HOME
    value: '{{ if eq .chezmoi.os "windows" }}C:/Users/cwel/.config{{ else }}{{ .chezmoi.homeDir }}/.config{{ end }}'
  - name: XDG_CACHE_HOME
    value: '{{ if eq .chezmoi.os "windows" }}C:/Users/cwel/.cache{{ else }}{{ .chezmoi.homeDir }}/.cache{{ end }}'
  - name: XDG_DATA_HOME
    value: '{{ if eq .chezmoi.os "windows" }}C:/Users/cwel/.local/share{{ else }}{{ .chezmoi.homeDir }}/.local/share{{ end }}'
  - name: XDG_STATE_HOME
    value: '{{ if eq .chezmoi.os "windows" }}C:/Users/cwel/.local/state{{ else }}{{ .chezmoi.homeDir }}/.local/state{{ end }}'
  - name: XDG_BIN_HOME
    value: '{{ if eq .chezmoi.os "windows" }}C:/Users/cwel/.local/bin{{ else }}{{ .chezmoi.homeDir }}/.local/bin{{ end }}'
  - name: XDG_PROJECTS_DIR
    value: '{{ if eq .chezmoi.os "windows" }}C:/Users/cwel/Projects{{ else }}{{ .chezmoi.homeDir }}/Projects{{ end }}'
  - name: MANPAGER
    value: nvim +Man!
  - name: WORDCHARS
    value: '~!#$%^&*(){}[]<>?.+;'
  - name: PROMPT_EOL_MARK
    value: ''
  - name: LANG
    value: en_US.UTF-8
  - name: LC_ALL
    value: en_US.UTF-8
  - name: LC_CTYPE
    value: en_US.UTF-8
  - name: PASSWORD_STORE_DIR
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/pass'
    if: "{{"{{"}} match .OS \"linux\" {{"}}"}}"
  - name: GNUPGHOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/gnupg'
  - name: DOCKER_CONFIG
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/docker'
  - name: DOCKERM
    value: /opt/docker
  - name: CARGO_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/cargo'
  - name: RUSTUP_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/rustup'
  - name: HOMEBREW_NO_AUTO_UPDATE
    value: '1'
  - name: HOMEBREW_BAT
    value: '1'
  - name: HOMEBREW_GITHUB_API_TOKEN
    value: '{{ onepasswordRead "op://Secrets/Git/Github/pat" | trim }}'
  - name: HOMEBREW_NO_ENV_HINTS
    value: '1'
  - name: DOTNET_CLI_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/dotnet'
  - name: XAUTHORITY
    value: '{{"{{"}} env "XDG_STATE_HOME" {{"}}"}}/.Xauthority'
  - name: PYTHONSTARTUP
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/python/pythonrc'
  - name: vivid_theme
    value: catppuccin-mocha
  - name: PIPX_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/pipx'
  - name: GLOW_STYLE
    value: '{{"{{ .Home }}"}}/.config/glow/catppuccin-mocha.json'
  - name: GRADLE_USER_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/gradle'
  - name: NPM_CONFIG_INIT_MODULE
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/npm/config/npm-init.js'
  - name: NPM_CONFIG_CACHE
    value: '{{"{{"}} env "XDG_CACHE_HOME" {{"}}"}}/npm'
  - name: NODE_REPL_HISTORY
    value: '{{"{{"}} env "XDG_STATE_HOME" {{"}}"}}/node_repl_history'
  - name: GOPATH
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/go'
  - name: GOBIN
    value: '{{"{{"}} env "GOPATH" {{"}}"}}/bin'
  - name: GO111MODULE
    value: on
  - name: RIPGREP_CONFIG_PATH
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/ripgrep/config'
  - name: LESSHISTFILE
    value: '{{"{{"}} env "XDG_CACHE_HOME" {{"}}"}}/.lesshsts'
  - name: WGETRC
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/wget/wgetrc'
  - name: PAGER
    value: bat
  - name: GIT_PAGER
    value: delta
  - name: VAGRANT_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/vagrant'
  {{ if .isWSL -}}
  - name: WIN_HOME
    value: /mnt/c/users/cwel
    {{- end }}
  {{ if eq .chezmoi.hostname "pbox" -}}
  - name: RUST
    value: '/mnt/media'
  - name: FLASH
    value: '/mnt/bool'
  - name: BRICK
    value: '/mnt/backup'
    {{- end }}
  {{ if ne .chezmoi.hostname "pbox" -}}
  - name: DOCKER_HOST
    value: tcp://psock:2375
    {{- end }}
  - name: OP_BIOMETRIC_UNLOCK_ENABLED
    value: 'true'
    if: "{{"{{"}} match .OS \"darwin\" {{"}}"}}"
  - name: PKG_CONFIG_PATH
    value: /usr/lib/x86_64-linux-gnu/pkgconfig/:/usr/share/pkgconfig/
    if: "{{"{{"}} match .OS \"linux\" {{"}}"}}"

  # Windows-specific environment variables
  - name: YAZI_CONFIG_HOME
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/yazi'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: YAZI_FILE_ONE
    value: 'C:\Program Files\Git\usr\bin\file.exe'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: KOMOREBI_CONFIG_HOME
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/komorebi'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: AWS_CONFIG_FILE
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/aws/config'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: AWS_DATA_PATH
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/aws'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: AWS_SHARED_CREDENTIALS_FILE
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/aws/credentials'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: EZA_CONFIG_DIR
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/eza'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: VBOX_USER_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/virtualbox'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: VAGRANT_DEFAULT_PROVIDER
    value: virtualbox
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: BAT_CONFIG_DIR
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/bat'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: PIPX_GLOBAL_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/pipx'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: GH_DASH_CONFIG
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/gh-dash/config.yml'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: YARN_CACHE_FOLDER
    value: '{{"{{"}} env "XDG_CACHE_HOME" {{"}}"}}/npm'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: PNPM_HOME
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/pnpm'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: RCLONE_CONFIG_DIR
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/rclone'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: MISE_NODE_DEFAULT_PACKAGES_FILE
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/mise/default-npm-packages'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: MISE_GO_DEFAULT_PACKAGES_FILE
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/mise/default-npm-packages'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: MISE_PYTHON_DEFAULT_PACKAGES_FILE
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/mise/default-python-packages'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: MISE_RUBY_DEFAULT_PACKAGES_FILE
    value: '{{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/mise/default-gems'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: PYTHON_HISTORY
    value: '{{"{{"}} env "XDG_DATA_HOME" {{"}}"}}/python/history'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true
  - name: XDG_RUNTIME_DIR
    value: '{{"{{"}} .Home {{"}}"}}/AppData/Local/Temp'
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true

path:
  - value: |
      {{"{{"}} .Home {{"}}"}}/bin
      {{"{{"}} .Home {{"}}"}}/.local/bin
      /usr/local/sbin
      /usr/bin
      /usr/local/bin
      /bin
    force: true

  - value: |
      {{"{{"}} env "WIN_HOME" {{"}}"}}/AppData/Local/Programs/Microsoft VS Code/bin
    if: "{{"{{"}} and (match .OS \"windows\") (hasCommand \"wslvar\") {{"}}"}}"

  # npm global packages
  - value: |
      {{"{{"}} env "XDG_CONFIG_HOME" {{"}}"}}/npm/bin
    if: "{{"{{"}} env \"NPM_CONFIG_INIT_MODULE\" {{"}}"}}"
  - value: |
      {{"{{"}} .Home {{"}}"}}/.npm-global/bin
    if: "{{"{{"}} not (env \"NPM_CONFIG_INIT_MODULE\") {{"}}"}}"

  # Homebrew paths
  - value: |
      /home/linuxbrew/.linuxbrew/bin
      /home/linuxbrew/.linuxbrew/sbin
    if: "{{"{{"}} hasCommand \"brew\" {{"}}"}}"

  # Rust/Cargo paths
  - value: |
      {{"{{"}} env "CARGO_HOME" {{"}}"}}/bin
    if: "{{"{{"}} env \"CARGO_HOME\" {{"}}"}}"
  - value: |
      {{"{{"}} .Home {{"}}"}}/.cargo/bin
    if: "{{"{{"}} not (env \"CARGO_HOME\") {{"}}"}}"

  # Go paths
  - value: |
      {{"{{"}} env "GOPATH" {{"}}"}}/bin
    if: "{{"{{"}} or (hasCommand \"go\") (isDir (join .Home \".go\")) {{"}}"}}"

  # macOS Homebrew
  - value: |
      /opt/homebrew/bin
      /usr/local/bin
    if: "{{"{{"}} eq .OS \"darwin\" {{"}}"}}"

  # Windows-specific paths
  - value: |
      {{"{{"}} .Home {{"}}"}}/.local/share/nvim-data/mason/bin
      {{"{{"}} .Home {{"}}"}}/Documents/PowerShell/Scripts
      C:\Program Files\Git\usr\bin
      {{"{{"}} .Home {{"}}"}}/.local/bin
    if: "{{"{{"}} match .OS \"windows\" {{"}}"}}"
    persist: true


