"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
    linemode       = "size"
    mouse_events   = ["click", "drag", "move", "scroll", "touch"]
    ratio          = [1, 3, 4]
    scrolloff      = 5
    show_hidden    = false
    show_symlink   = true
    sort_by        = "natural"
    sort_dir_first = true
    sort_reverse   = false
    sort_sensitive = false
    sort_translit  = false

[preview]
    cache_dir       = ""
    image_delay     = 30
    image_filter    = "triangle"
    image_quality   = 75
    max_height      = 900
    max_width       = 600
    tab_size        = 2
    ueberzug_offset = [0, 0, 0, 0]
    ueberzug_scale  = 1
    wrap            = "no"

[opener]
    edit = [
        { run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
        { run = 'code %*', orphan = true, desc = "code", for = "windows" },
        { run = 'code -w %*', block = true, desc = "code (block)", for = "windows" },
    ]
    extract = [
        { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
        { run = 'ya pub extract --list %*', desc = "Extract here", for = "windows" },
    ]
    open = [
        { run = 'open "$@"', desc = "Open", for = "macos" },
        { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
        { run = 'termux-open "$1"', desc = "Open", for = "android" },
        { run = 'xdg-open "$1"', desc = "Open", for = "linux" },
    ]
    play = [
        { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
        { run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
        { run = 'mpv --force-window %*', orphan = true, for = "windows" },
    ]
    reveal = [
        { run = '''clear; exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
        { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
        { run = 'open -R "$1"', desc = "Reveal", for = "macos" },
        { run = 'termux-open "$(dirname "$1")"', desc = "Reveal", for = "android" },
        { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
    ]

[open]
    rules = [
        # Folder
        { name = "*/", use = [
            "edit",
            "open",
            "reveal",
        ] },
        # Text
        { mime = "text/*", use = [
            "edit",
            "reveal",
        ] },
        # Image
        { mime = "image/*", use = [
            "open",
            "reveal",
        ] },
        # Media
        { mime = "{audio,video}/*", use = [
            "play",
            "reveal",
        ] },
        # Archive
        { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [
            "extract",
            "reveal",
        ] },
        # JSON
        { mime = "*/javascript", use = [
            "edit",
            "reveal",
        ] },
        { mime = "application/{json,ndjson}", use = [
            "edit",
            "reveal",
        ] },
        # Empty file
        { mime = "inode/empty", use = [
            "edit",
            "reveal",
        ] },
        # Fallback
        { name = "*", use = [
            "open",
            "reveal",
        ] },
    ]

[tasks]
    bizarre_retry    = 3
    image_alloc      = 536870912    # 512MB
    image_bound      = [5000, 5000]
    macro_workers    = 10
    micro_workers    = 10
    suppress_preload = false

[plugin]
    fetchers = [
        # Mimetype
        { id = "mime", name = "*", run = "mime", prio = "high" },
    ]
    preloaders = [
        # Image
        { mime = "image/*", run = "image" },
        { mime = "image/svg+xml", run = "svg" },
        { mime = "image/{avif,hei?,jxl,x-canon-cr2}", run = "magick" },
        # Video
        { mime = "video/*", run = "video" },
        # PDF
        { mime = "application/pdf", run = "pdf" },
        # Font
        { mime = "application/ms-opentype", run = "font" },
        { mime = "font/*", run = "font" },
    ]
    previewers = [
        { name = "*/", run = "folder" },
        # Code
        { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
        { mime = "text/*", run = "code" },
        # JSON
        { mime = "application/{json,ndjson}", run = "json" },
        # Image
        { mime = "image/*", run = "image" },
        { mime = "image/svg+xml", run = "svg" },
        { mime = "image/{avif,hei?,jxl,x-canon-cr2}", run = "magick" },
        # Video
        { mime = "video/*", run = "video" },
        # PDF
        { mime = "application/pdf", run = "pdf" },
        # Archive
        { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
        { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
        { name = "*.{AppImage,appimage}", run = "archive" },
        # Virtual Disk / Disk Image
        { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
        { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
        { name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
        # Font
        { mime = "application/ms-opentype", run = "font" },
        { mime = "font/*", run = "font" },
        # Empty file
        { mime = "inode/empty", run = "empty" },
        # Fallback
        { name = "*", run = "file" },
    ]
    spotters = [
        { name = "*/", run = "folder" },
        # Code
        { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
        { mime = "text/*", run = "code" },
        # Image
        { mime = "image/*", run = "image" },
        { mime = "image/svg+xml", run = "svg" },
        { mime = "image/{avif,hei?,jxl}", run = "magick" },
        # Video
        { mime = "video/*", run = "video" },
        # Fallback
        { name = "*", run = "file" },
    ]

[input]
    cursor_blink = false

    # cd
    cd_offset = [0, 2, 3, 50]
    cd_origin = "top-center"
    cd_title  = "Change directory:"

    # create
    create_offset = [0, 2, 3, 50]
    create_origin = "top-center"
    create_title  = ["Create (dir):", "Create:"]

    # rename
    rename_offset = [0, 1, 3, 50]
    rename_origin = "hovered"
    rename_title  = "Rename:"

    # filter
    filter_offset = [0, 2, 3, 50]
    filter_origin = "top-center"
    filter_title  = "Filter:"

    # find
    find_offset = [0, 2, 3, 50]
    find_origin = "top-center"
    find_title  = ["Find next:", "Find previous:"]

    # search
    search_offset = [0, 2, 3, 50]
    search_origin = "top-center"
    search_title  = "Search via {n}:"

    # shell
    shell_offset = [0, 2, 3, 50]
    shell_origin = "top-center"
    shell_title  = ["Shell (block):", "Shell:"]

[confirm]
    # trash
    trash_offset = [0, 0, 20, 70]
    trash_origin = "center"
    trash_title  = "Trash {n} selected file{s}?"

    # delete
    delete_offset = [0, 0, 20, 70]
    delete_origin = "center"
    delete_title  = "Permanently delete {n} selected file{s}?"

    # overwrite
    overwrite_content = "Will overwrite the following file:"
    overwrite_offset  = [0, 0, 15, 50]
    overwrite_origin  = "center"
    overwrite_title   = "Overwrite file?"

    # quit
    quit_content = "The following tasks are still running, are you sure you want to quit?"
    quit_offset  = [0, 0, 15, 50]
    quit_origin  = "center"
    quit_title   = "Quit?"

[pick]
    open_offset = [0, 1, 50, 7]
    open_origin = "hovered"
    open_title  = "Open with:"

[which]
    sort_by        = "none"
    sort_reverse   = false
    sort_sensitive = false
    sort_translit  = false

    [[plugin.prepend_fetchers]]
        id   = "git"
        name = "*"
        run  = "git"

    [[plugin.prepend_fetchers]]
        id   = "git"
        name = "*/"
        run  = "git"
