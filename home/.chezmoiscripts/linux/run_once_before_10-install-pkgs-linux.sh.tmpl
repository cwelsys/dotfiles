#!/usr/bin/env bash

set -eufo pipefail

# --- Distro Detection & Package Manager Setup ---
DISTRO_ID=""
DISTRO_ID_LIKE=""
PM_TYPE=""
PM_UPDATE_CMD=""
PM_INSTALL_CMD=""
PM_PKG_INSTALL_OPTS=""

if [ -f /etc/os-release ]; then
  # shellcheck disable=SC1091
  . /etc/os-release
  DISTRO_ID=$ID
  DISTRO_ID_LIKE=$ID_LIKE
else
  echo "ERROR: Cannot determine Linux distribution. /etc/os-release not found."
  exit 1
fi

echo "Detected Distribution ID: $DISTRO_ID"
if [ -n "$DISTRO_ID_LIKE" ]; then
  echo "Detected Distribution ID Like: $DISTRO_ID_LIKE"
fi

# Determine Package Manager based on DISTRO_ID or DISTRO_ID_LIKE
if [[ "$DISTRO_ID" == "fedora" ]] || [[ "$DISTRO_ID_LIKE" == *"fedora"* ]]; then
  PM_TYPE="dnf"
  PM_UPDATE_CMD="sudo dnf makecache --timer"
  PM_INSTALL_CMD="sudo dnf"
  PM_PKG_INSTALL_OPTS="install -y"
elif [[ "$DISTRO_ID" == "arch" ]] || [[ "$DISTRO_ID_LIKE" == *"arch"* ]]; then
  PM_TYPE="pacman"
  PM_UPDATE_CMD="sudo pacman -Sy"
  PM_INSTALL_CMD="sudo pacman"
  PM_PKG_INSTALL_OPTS="-S --noconfirm"
elif [[ "$DISTRO_ID" == "debian" ]] || [[ "$DISTRO_ID" == "ubuntu" ]] || [[ "$DISTRO_ID_LIKE" == *"debian"* ]] || [[ "$DISTRO_ID_LIKE" == *"ubuntu"* ]]; then
  PM_TYPE="apt"
  PM_UPDATE_CMD="sudo apt-get update"
  PM_INSTALL_CMD="sudo apt-get"
  PM_PKG_INSTALL_OPTS="install -y"
elif [[ "$DISTRO_ID" == "opensuse-tumbleweed" ]] || [[ "$DISTRO_ID" == "opensuse-leap" ]] || [[ "$DISTRO_ID_LIKE" == *"suse"* ]]; then
  PM_TYPE="zypper"
  PM_UPDATE_CMD="sudo zypper refresh"
  PM_INSTALL_CMD="sudo zypper"
  PM_PKG_INSTALL_OPTS="install -y"
else
  echo "WARNING: Unsupported distribution '$DISTRO_ID'. Cannot determine package manager."
  echo "You will need to install packages manually or extend this script."
  PM_TYPE="unknown"
fi

# --- Update Package Cache ---
if [[ "$PM_TYPE" != "unknown" ]]; then
  echo "Updating package cache using $PM_TYPE..."
  eval "$PM_UPDATE_CMD"
else
  echo "Skipping package cache update due to unknown package manager."
fi

# --- Package Installation ---
{{ $pkgs := .pkgs.linux.common }}
{{ if .isLaptop }}
{{   $laptopPkgs := .pkgs.linux.laptop_common }}
{{   $pkgs = concat $pkgs $laptopPkgs }}
{{ end }}

if [[ "$PM_TYPE" != "unknown" ]]; then
  {{ if $pkgs }}
  echo "INSTALLING COMMON PACKAGES ($PM_TYPE)..."
  PKG_LIST_STR="{{ $pkgs | quoteList | join " " }}"
  if [ -n "$PKG_LIST_STR" ]; then
    echo "Packages to install: $PKG_LIST_STR"
    # shellcheck disable=SC2086
    $PM_INSTALL_CMD $PM_PKG_INSTALL_OPTS $PKG_LIST_STR
  else
    echo "No common packages specified in linux.yml for this system type."
  fi
  {{ else }}
  echo "No common package list defined in pkgs.linux.common."
  {{ end }}
else
  echo "Skipping package installation due to unknown package manager."
  {{ if $pkgs }}
  echo "The following packages were configured but NOT installed:"
  echo "{{ $pkgs | quoteList | join " " }}"
  {{ end }}
fi

# --- Basic Service Setup (Best Effort) ---
if [[ "$PM_TYPE" != "unknown" ]]; then
  # Check if cronie is installed (you should include 'cronie' or equivalent in your common packages if needed)
  if command -v crond &>/dev/null || $PM_INSTALL_CMD list --installed cronie &>/dev/null 2>&1 || $PM_INSTALL_CMD list --installed cron &>/dev/null 2>&1; then
    CRON_SERVICE_NAME=""
    if systemctl list-unit-files "cronie.service" &>/dev/null; then
      CRON_SERVICE_NAME="cronie.service"
    elif systemctl list-unit-files "crond.service" &>/dev/null; then
      CRON_SERVICE_NAME=
