$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Check if gpg is available
if (-not (Get-Command gpg -ErrorAction SilentlyContinue)) {
    Write-Error "GPG not found. Aborting key import."
    exit 1
}

# Create temporary files for the keys
$privateKeyFile = Join-Path $env:TEMP "private_key.asc"
$publicKeyFile = Join-Path $env:TEMP "public_key.asc"

try {
    # Write the decrypted keys directly to files
    $privateKeyContent = @"
{{ includeTemplate "gpg/encrypted_pri-ecc.gpg" | decrypt }}
"@

    $publicKeyContent = @"
{{ includeTemplate "gpg/encrypted_pub-ecc.gpg" | decrypt }}
"@

    # Save to temporary files
    Set-Content -Path $privateKeyFile -Value $privateKeyContent -NoNewline
    Set-Content -Path $publicKeyFile -Value $publicKeyContent -NoNewline

    # Import the keys from the files
    Write-Host "Importing GPG private key..."
    gpg --batch --import $privateKeyFile

    Write-Host "Importing GPG public key..."
    gpg --batch --import $publicKeyFile

    # Set trust level
    $trustCommands = @(
        "5",
        "y",
        "save"
    ) | ForEach-Object { "$_`n" } | Out-String

    Write-Host "Setting trust level for key {{ .gpgId }}..."
    $trustCommands | gpg --command-fd 0 --no-tty --no-greeting -q --edit-key '{{ .gpgId }}' trust
}
finally {
    # Clean up the temporary files
    if (Test-Path $privateKeyFile) { Remove-Item $privateKeyFile }
    if (Test-Path $publicKeyFile) { Remove-Item $publicKeyFile }
}
