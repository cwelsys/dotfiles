{{- if not .isVM -}}
{{ $config := .config.windows.startup.shortcuts }}
{{ if $config }}

$ErrorActionPreference = 'Stop'

# Define colors for output
$colors = @{
    Info = 'Cyan'
    Success = 'Green'
    Error = 'Red'
    Warning = 'Yellow'
    Details = 'DarkGray'
}

Write-Host "`nüìå Creating startup shortcuts..." -ForegroundColor $colors.Info

# Get startup folder path
$startupFolder = [Environment]::GetFolderPath('Startup')
Write-Host "Startup folder: $startupFolder" -ForegroundColor $colors.Details

# Function to create a shortcut
function Create-Shortcut {
    param (
        [string]$Name,
        [string]$Target,
        [string]$Arguments = "",
        [string]$WorkingDirectory = "",
        [string]$Description = "",
        [string]$IconLocation = "",
        [int]$WindowStyle = 1  # 1=Normal, 3=Maximized, 7=Minimized
    )

    # Expand environment variables in paths
    $Target = [Environment]::ExpandEnvironmentVariables($Target)
    $Arguments = [Environment]::ExpandEnvironmentVariables($Arguments)
    $WorkingDirectory = [Environment]::ExpandEnvironmentVariables($WorkingDirectory)
    $IconLocation = [Environment]::ExpandEnvironmentVariables($IconLocation)

    # Default working directory to target path if not specified
    if (-not $WorkingDirectory -and $Target) {
        $WorkingDirectory = Split-Path -Parent $Target
    }

    $shortcutPath = Join-Path $startupFolder "$Name.lnk"

    try {
        $WshShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut($shortcutPath)
        $Shortcut.TargetPath = $Target

        if ($Arguments) { $Shortcut.Arguments = $Arguments }
        if ($WorkingDirectory) { $Shortcut.WorkingDirectory = $WorkingDirectory }
        if ($IconLocation) { $Shortcut.IconLocation = $IconLocation }
        if ($Description) { $Shortcut.Description = $Description }
        $Shortcut.WindowStyle = $WindowStyle

        $Shortcut.Save()

        Write-Host "‚úÖ Created: $Name" -ForegroundColor $colors.Success
        Write-Host "  ‚Ü≥ Target: $Target $Arguments" -ForegroundColor $colors.Details
        return $true
    }
    catch {
        Write-Host "‚ùå Failed to create shortcut: $Name" -ForegroundColor $colors.Error
        Write-Host "  ‚Ü≥ Error: $_" -ForegroundColor $colors.Error
        return $false
    }
}

# Process shortcuts from config
$shortcutCount = 0
$successCount = 0

{{ range $shortcut := $config }}
Write-Host "`nProcessing: {{ $shortcut.name }}" -ForegroundColor $colors.Info
$shortcutCount++

# Convert shortcut to JSON and parse in PowerShell to safely handle missing fields
$shortcutJson = @"
{{ $shortcut | toJson }}
"@

$shortcutObj = $shortcutJson | ConvertFrom-Json

# Clean up shortcut name (remove .exe if present)
$shortcutName = $shortcutObj.name -replace '\.exe$', ''

# Create parameter hashtable with required values
$params = @{
    Name = $shortcutName
    Target = $shortcutObj.target
}

# Handle both 'args' and 'arguments' for flexibility
if ($shortcutObj.PSObject.Properties.Name -contains 'arguments') {
    $params.Arguments = $shortcutObj.arguments
} elseif ($shortcutObj.PSObject.Properties.Name -contains 'args') {
    $params.Arguments = $shortcutObj.args
}

# Add other optional parameters only if they exist
if ($shortcutObj.PSObject.Properties.Name -contains 'workingdir') {
    $params.WorkingDirectory = $shortcutObj.workingdir
}
if ($shortcutObj.PSObject.Properties.Name -contains 'description') {
    $params.Description = $shortcutObj.description
}
if ($shortcutObj.PSObject.Properties.Name -contains 'icon') {
    $params.IconLocation = $shortcutObj.icon
}
if ($shortcutObj.PSObject.Properties.Name -contains 'windowstyle') {
    $params.WindowStyle = $shortcutObj.windowstyle
}

$result = Create-Shortcut @params
if ($result) { $successCount++ }
{{ end }}

# Summary
Write-Host "`nüìã Summary: Created $successCount of $shortcutCount shortcuts" -ForegroundColor $colors.Info
if ($successCount -eq $shortcutCount) {
    Write-Host "‚úÖ All startup shortcuts created successfully!" -ForegroundColor $colors.Success
} else {
    Write-Host "‚ö†Ô∏è Some shortcuts failed to create." -ForegroundColor $colors.Warning
}

{{ else }}
Write-Host "No startup shortcuts defined in config. Skipping." -ForegroundColor "Yellow"
{{ end }}
{{ end }}
