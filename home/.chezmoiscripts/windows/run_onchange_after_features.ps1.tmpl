# Self-elevate
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator'))
{
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000)
  {
    $CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

Import-Module Microsoft.PowerShell.Security
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
Set-ExecutionPolicy Bypass -Scope Process -Force

Write-Host "Enabling OpenSSH Server..."
Add-WindowsCapability -Online -Name OpenSSH.Server*

Write-Host "Configuring OpenSSH services..."
Set-Service -Name sshd -StartupType 'Automatic'
Start-Service sshd

if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {
    Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
} else {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
}

Write-Host "Setting up administrators_authorized_keys..."
$adminKeyPath = "C:\ProgramData\ssh\administrators_authorized_keys"
$userKeyPath = "$env:USERPROFILE\.ssh\authorized_keys"

if (Test-Path $userKeyPath) {
    Copy-Item -Path $userKeyPath -Destination $adminKeyPath -Force
    icacls $adminKeyPath /inheritance:r
    icacls $adminKeyPath /grant SYSTEM:"(F)"
    icacls $adminKeyPath /grant Administrators:"(F)"

    Write-Host "Administrators authorized_keys file created and permissions set"
} else {
    Write-Host "Warning: User's authorized_keys file not found at $userKeyPath"
}

New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Program Files\PowerShell\7\pwsh.exe" -PropertyType String -Force

Get-Service sshd | Restart-Service -Force

Write-Host "Enabling Dev mode..."
Add-WindowsCapability -Online -Name DeveloperMode

{{ range $feature := .config.windows.features.enable }}
Write-Host 'Enable {{ $feature }}...'
Enable-WindowsOptionalFeature -Online -FeatureName '{{ $feature }}'
{{ end }}

{{ range $feature := .config.windows.features.disable }}
Write-Host 'Disable {{ $feature }}...'
Disable-WindowsOptionalFeature -Online -FeatureName '{{ $feature }}'
{{ end }}
