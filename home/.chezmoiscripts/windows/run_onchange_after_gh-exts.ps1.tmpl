{{ if (index .pkgs.windows.addons "gh") }}
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

Write-Host ""
Write-Color -Text "******************************************" -Color DarkGray
Write-Color -Text "**   INSTALLING GITHUB CLI EXTENSIONS   **" -Color DarkGray
Write-Color -Text "******************************************" -Color DarkGray
Write-Host ""

if (-not (Get-Command "gh" -ErrorAction SilentlyContinue))
{
  Write-Color -Text "‚ùå ", "gh: ", "GitHub CLI (gh) command not found. Skipping extension installation." -Color Red, White, Gray
  exit 1 # Exit with an error as gh is a prerequisite
}

Write-Color -Text "üîÑ ", "gh: ", "Fetching installed extensions..." -Color Blue, White, Gray
# Get currently installed extensions
$installedExtensionNames = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
try {
    # gh extension list can be slow, and its output format is simple: name<TAB>version<TAB>path<TAB>url
    # Remove --limit flag as it's not supported in all gh versions
    $extensionOutput = gh extension list
    if ($LASTEXITCODE -ne 0) {
        Write-Color -Text "‚ö†Ô∏è ", "gh: ", "Failed to list extensions. Will attempt to install all desired extensions." -Color Yellow, White, Gray
    } elseif ($null -ne $extensionOutput) {
        foreach ($line in $extensionOutput) {
            # The first part of the line before a tab is the extension name (e.g., user/repo or just repo)
            $nameOnly = ($line -split "`t")[0].Trim()
            if (-not [string]::IsNullOrWhiteSpace($nameOnly)) {
                # To compare correctly, we often need just the 'repo' part if the desired is 'user/repo'
                # and gh list shows 'user/repo'. If gh list shows just 'repo', that's fine too.
                # For simplicity in matching, we'll store the full name as listed by `gh extension list`.
                # The comparison logic later will handle 'user/repo' vs 'repo' if needed.
                $null = $installedExtensionNames.Add($nameOnly)
            }
        }
        Write-Color -Text "‚úÖ ", "gh: ", "Successfully fetched installed extensions." -Color Green, White, Gray
    } else {
         Write-Color -Text "‚ÑπÔ∏è ", "gh: ", "No extensions currently installed or unable to parse list." -Color Yellow, White, Gray
    }
}
catch {
    Write-Color -Text "‚ö†Ô∏è ", "gh: ", "Error retrieving installed extensions: $($_.Exception.Message). Will attempt to install all desired extensions." -Color Yellow, White, Gray
}
Write-Host ""

# Desired extensions from chezmoi config
$desiredExtensions = @(
    {{- $ghAddons := (index .pkgs.windows.addons "gh") -}}
    {{- if $ghAddons -}}
        {{- $packages := $ghAddons.packages -}}
        {{- range $i, $ext := $packages -}}
    "{{ $ext }}"{{ if not (eq (add $i 1) (len $packages)) }},{{ end }}
        {{- end -}}
    {{- end -}}
)
$desiredExtensions = $desiredExtensions | Where-Object { -not [String]::IsNullOrWhiteSpace($_) } | Get-Unique

if ($desiredExtensions.Count -eq 0) {
    Write-Color -Text "‚ÑπÔ∏è ", "gh: ", "No GitHub CLI extensions specified in configuration." -Color Yellow, White, Gray
} else {
    Write-Color -Text "Processing desired GitHub CLI extensions..." -Color DarkGray
    foreach ($desiredExtFullName in $desiredExtensions) {
        $extToInstall = $desiredExtFullName.Trim()
        if ([string]::IsNullOrWhiteSpace($extToInstall)) {
            continue
        }

        # For checking existence, we compare against the names `gh extension list` provides.
        # `gh extension install user/repo` will be installed as `user/repo`.
        # `gh extension install repo` (if it's an official one) might be listed as just `repo`.
        # The most reliable check is if the exact string $extToInstall is in $installedExtensionNames.
        # If `gh extension list` normalizes names (e.g. always shows full `user/repo`), this is fine.
        # If not, a more complex check might be needed (e.g., checking both `extToInstall` and `extToInstall.Split('/')[-1]`)

        if ($installedExtensionNames.Contains($extToInstall)) {
            Write-Color -Text "[ext] ", "gh: ", "(exists) ", $extToInstall -Color Blue, White, Yellow, Gray
        } else {
            # Attempt to install if not found by exact name.
            # `gh extension install` is idempotent for already installed extensions, but it's slower.
            Write-Color -Text "[ext] ", "gh: ", "Installing ", $extToInstall -Color Blue, White, White, Gray
            gh extension install $extToInstall
            if ($LASTEXITCODE -eq 0) {
                Write-Color -Text "[ext] ", "gh: ", "(success) ", $extToInstall -Color Blue, White, Green, Gray
                # Add to installed list so we don't try again if it was a different alias in config
                $null = $installedExtensionNames.Add($extToInstall)
            } else {
                Write-Color -Text "[ext] ", "gh: ", "(failed) ", $extToInstall -Color Blue, White, Red, Gray
            }
        }
    }
}
Write-Host ""
Write-Color -Text "`nüëç ", "GitHub CLI extension setup process completed.", "`n" -Color White, DarkGray, White

{{ end }}
