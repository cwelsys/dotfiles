# Set up environment
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Ensure PSWriteColor is installed
if (-not (Get-Module -ListAvailable -Name PSWriteColor)) {
    Write-Host "Installing PSWriteColor module..."
    Install-Module -Name PSWriteColor -Force -Scope CurrentUser -ErrorAction SilentlyContinue
}
Import-Module PSWriteColor -ErrorAction SilentlyContinue

if (-not (Get-Command "scoop" -ErrorAction SilentlyContinue)) {
    Write-Color -Text "‚ùå Scoop hasn't been installed! Please install Scoop first." -Color Red
    exit 1
}

# Get Scoop's installation directory
$scoopDir = ""
try {
    $scoopCmdDetails = Get-Command scoop.ps1 -ErrorAction Stop
    $scoopDir = Split-Path (Split-Path $scoopCmdDetails.Source -Parent) -Parent
} catch {
    Write-Color -Text "‚ö†Ô∏è ", "scoop: ", "Could not determine Scoop installation directory. Bucket checks might be unreliable." -Color Yellow, DarkGreen, Yellow
}


{{ if or .pkgs.windows.scoop.buckets .pkgs.windows.scoop.apps .pkgs.windows.scoop.importRegistry }}
Write-Host ""
Write-Color -Text "***********************************" -Color Cyan
Write-Color -Text "**    CONFIGURING SCOOP APPS     **" -Color Cyan
Write-Color -Text "***********************************" -Color Cyan
Write-Host ""
{{ end }}


{{ if .pkgs.windows.scoop.buckets }}
Write-Color -Text "üîÑ Adding Scoop buckets..." -Color Green
$desiredBuckets = @(
    {{- range $i, $bucket := .pkgs.windows.scoop.buckets -}}
    "{{ $bucket }}"{{ if not (eq (add $i 1) (len $.pkgs.windows.scoop.buckets)) }},{{ end }}
    {{- end -}}
)
$desiredBuckets = $desiredBuckets | Where-Object { $_ -ne "" }

if ($desiredBuckets.Count -gt 0) {
    if ([string]::IsNullOrWhiteSpace($scoopDir)) {
        Write-Color -Text "‚ö†Ô∏è ", "scoop: ", "Scoop directory not found. Falling back to 'scoop bucket list' for bucket checks." -Color Yellow, DarkGreen, Yellow
        # Fallback logic if $scoopDir isn't found (less reliable parsing)
        $installedBucketsOutput = scoop bucket list
        $installedBucketNamesSet = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
        if ($installedBucketsOutput) {
            foreach ($bucketLine in $installedBucketsOutput) {
                $bucketNameOnly = ($bucketLine.Trim() -split '\s+')[0]
                if (-not [string]::IsNullOrWhiteSpace($bucketNameOnly)) {
                    $null = $installedBucketNamesSet.Add($bucketNameOnly)
                }
            }
        }
         foreach ($bucketNameToAddRaw in $desiredBuckets) {
            $bucketNameToAdd = $bucketNameToAddRaw.Trim()
            if ([string]::IsNullOrWhiteSpace($bucketNameToAdd)) { continue }

            if ($installedBucketNamesSet.Contains($bucketNameToAdd)) {
                Write-Color -Text "[bucket] ", "scoop: ", "(exists) ", $bucketNameToAdd -Color Blue, DarkGreen, Yellow, Gray
            } else {
                # (Fallback continues with original logic)
                Write-Color -Text "[bucket] ", "scoop: ", "Adding ", $bucketNameToAdd -Color Blue, DarkGreen, White, Gray
                scoop bucket add $bucketNameToAdd
                if ($LASTEXITCODE -eq 0) { Write-Color -Text "[bucket] ", "scoop: ", "(success) ", $bucketNameToAdd -Color Blue, DarkGreen, Green, Gray }
                else { Write-Color -Text "[bucket] ", "scoop: ", "(failed) ", $bucketNameToAdd -Color Blue, DarkGreen, Red, Gray }
            }
        }
    } else {
        # Preferred logic using Test-Path
        foreach ($bucketNameToAddRaw in $desiredBuckets) {
            $bucketNameToAdd = $bucketNameToAddRaw.Trim()
            if ([string]::IsNullOrWhiteSpace($bucketNameToAdd)) {
                continue
            }
            $bucketPath = Join-Path $scoopDir "buckets\$bucketNameToAdd"
            if (Test-Path $bucketPath -PathType Container) {
                Write-Color -Text "[bucket] ", "scoop: ", "(exists) ", $bucketNameToAdd -Color Blue, DarkGreen, Yellow, Gray
            } else {
                Write-Color -Text "[bucket] ", "scoop: ", "Adding ", $bucketNameToAdd -Color Blue, DarkGreen, White, Gray
                scoop bucket add $bucketNameToAdd
                if ($LASTEXITCODE -eq 0) {
                    Write-Color -Text "[bucket] ", "scoop: ", "(success) ", $bucketNameToAdd -Color Blue, DarkGreen, Green, Gray
                } else {
                    Write-Color -Text "[bucket] ", "scoop: ", "(failed) ", $bucketNameToAdd -Color Blue, DarkGreen, Red, Gray
                }
            }
        }
    }
} else {
    Write-Color -Text "‚ÑπÔ∏è No Scoop buckets specified." -Color Green
}
Write-Host ""
{{ end }}


{{ if .pkgs.windows.scoop.apps }}
Write-Color -Text "üì¶ Installing Scoop packages..." -Color Green
$allDesiredScoopPkgs = @(
    {{- range $i, $pkg := .pkgs.windows.scoop.apps -}}
    "{{ $pkg }}"{{ if not (eq (add $i 1) (len $.pkgs.windows.scoop.apps)) }},{{ end }}
    {{- end -}}
)
$allDesiredScoopPkgs = $allDesiredScoopPkgs | Where-Object { $_ -ne "" }

if ($allDesiredScoopPkgs.Count -eq 0) {
    Write-Color -Text "‚ÑπÔ∏è No Scoop packages specified for installation." -Color Green
} else {
    # Track installed packages to avoid reinstalling them in future runs
    $installedPackagesPath = Join-Path $env:USERPROFILE ".config\chezmoi\installed_scoop_packages.json"
    $previouslyInstalledPackages = @()

    # Load previously installed packages if the file exists
    if (Test-Path $installedPackagesPath) {
        try {
            $previouslyInstalledPackages = Get-Content $installedPackagesPath -Raw | ConvertFrom-Json -ErrorAction Stop

            # Clean the loaded list - filter out any items that aren't proper package names
            $previouslyInstalledPackages = $previouslyInstalledPackages |
                Where-Object { $_ -and -not $_.ToString().StartsWith('@{') }

            Write-Color -Text "‚ÑπÔ∏è Found record of ", $previouslyInstalledPackages.Count, " previously installed packages" -Color Blue, Yellow, Blue
        } catch {
            Write-Color -Text "‚ö†Ô∏è Error reading installed packages file. Will rebuild it." -Color Yellow
            $previouslyInstalledPackages = @()
        }
    }

    # Get currently installed packages from scoop
    $currentlyInstalledPackages = @()
    try {
        $scoopList = scoop list
        foreach ($line in $scoopList) {
            if ($line -match '^(\S+)\s+') {
                $packageName = $matches[1]
                $currentlyInstalledPackages += $packageName
            }
        }
    } catch {
        Write-Color -Text "‚ö†Ô∏è Could not get list of installed packages from scoop. Will install all specified packages." -Color Yellow
    }

    # Track all packages we've installed (previously + new this run)
    $allInstalledPackages = New-Object System.Collections.ArrayList
    $previouslyInstalledPackages | ForEach-Object { $allInstalledPackages.Add($_) | Out-Null }
    $currentlyInstalledPackages | ForEach-Object {
        if (-not $allInstalledPackages.Contains($_)) {
            $allInstalledPackages.Add($_) | Out-Null
        }
    }

    # Install new packages
    foreach ($pkgToInstallRaw in $allDesiredScoopPkgs) {
        $pkgToInstallFullName = $pkgToInstallRaw.Trim() # This might be 'bucket/app' or 'app'
        if ([string]::IsNullOrWhiteSpace($pkgToInstallFullName)) {
            continue
        }

        $pkgNameToQuery = $pkgToInstallFullName.Split('/')[-1]

        # Check if already installed (either from our tracking or by querying scoop)
        $isInstalled = $false

        # First check our tracking list
        if ($allInstalledPackages.Contains($pkgNameToQuery)) {
            $isInstalled = $true
            Write-Color -Text "[package] ", "scoop: ", "(exists) ", $pkgToInstallFullName -Color Blue, DarkGreen, Yellow, Gray
            continue
        }

        # If not in our list, verify with scoop directly
        try {
            $info = scoop info $pkgNameToQuery

            if ($null -ne $info -and $info.PSObject.Properties.Name -contains 'Installed' -and $info.Installed) {
                $isInstalled = $true
            }
            elseif ($null -ne $info -and $info.PSObject.Properties.Name -contains 'Status' -and $info.Status -match 'installed') {
                $isInstalled = $true
            }
        } catch {
            Write-Color -Text "‚ö†Ô∏è ", "scoop: ", "Exception while checking status for '$pkgNameToQuery': $($_.Exception.Message)" -Color Yellow, DarkGreen, Red, Gray
        }

        if ($isInstalled) {
            Write-Color -Text "[package] ", "scoop: ", "(exists) ", $pkgToInstallFullName -Color Blue, DarkGreen, Yellow, Gray
            # Add to our tracking list if not already there
            if (-not $allInstalledPackages.Contains($pkgNameToQuery)) {
                $allInstalledPackages.Add($pkgNameToQuery) | Out-Null
            }
        } else {
            # support inline version (e.g. 'chezmoi@2.40.0') or extra flags
            $parts     = $pkgToInstallFullName -split '\s+'
            $nameVer   = $parts[0]
            $extraArgs = if ($parts.Count -gt 1) { $parts[1..($parts.Count-1)] } else { @() }
            Write-Color -Text "[package] ", "scoop: ", "Installing ", $nameVer -Color Blue, DarkGreen, White, Gray
            scoop install $nameVer @extraArgs
            if ($LASTEXITCODE -eq 0) {
                # Verify installation
                $verifyInfo = $null
                try { $verifyInfo = scoop info $pkgNameToQuery } catch {}

                $installSuccess = $false
                if ($null -ne $verifyInfo -and $verifyInfo.PSObject.Properties.Name -contains 'Installed' -and $verifyInfo.Installed) {
                    $installSuccess = $true
                } elseif ($null -ne $verifyInfo -and $verifyInfo.PSObject.Properties.Name -contains 'Status' -and $verifyInfo.Status -match 'installed') {
                    $installSuccess = $true
                }

                if ($installSuccess) {
                    Write-Color -Text "[package] ", "scoop: ", "(success) ", $pkgToInstallFullName -Color Blue, DarkGreen, Green, Gray
                    # Add to our tracking list
                    if (-not $allInstalledPackages.Contains($pkgNameToQuery)) {
                        $allInstalledPackages.Add($pkgNameToQuery) | Out-Null
                    }
                } else {
                    Write-Color -Text "[package] ", "scoop: ", "(finished with warning/no change) ", $pkgToInstallFullName -Color Blue, DarkGreen, Yellow, Gray
                }
            } else {
                Write-Color -Text "[package] ", "scoop: ", "(failed)  ", $pkgToInstallFullName -Color Blue, DarkGreen, Red, Gray
            }
        }
    }

    # Save the updated list of installed packages
    try {
        # Clean the list before saving - filter out any items that start with @{ which are invalid
        $cleanInstalledPackages = $allInstalledPackages | Where-Object { -not $_.StartsWith('@{') }

        # Convert to JSON and save
        $cleanInstalledPackages | ConvertTo-Json | Set-Content -Path $installedPackagesPath -Force
        Write-Color -Text "‚ÑπÔ∏è Updated installed packages list with ", $cleanInstalledPackages.Count, " packages" -Color Blue, Yellow, Blue
    } catch {
        Write-Color -Text "‚ö†Ô∏è Failed to save installed packages list: $($_.Exception.Message)" -Color Yellow
    }
}
Write-Host ""
{{ end }}

{{ if .pkgs.windows.scoop.importRegistry }}
Write-Color -Text "‚öôÔ∏è Importing Scoop registry files..." -Color Green
$registryFilesToImport = @(
    {{- range $i, $reg := .pkgs.windows.scoop.importRegistry -}}
    "{{ $reg }}"{{ if not (eq (add $i 1) (len $.pkgs.windows.scoop.importRegistry)) }},{{ end }}
    {{- end -}}
)
$registryFilesToImport = $registryFilesToImport | Where-Object { $_ -ne "" }

if ($registryFilesToImport.Count -gt 0) {
    foreach ($regFileRaw in $registryFilesToImport) {
        # Use .NET method for expanding environment variables for robustness
        $regFile = ([System.Environment]::ExpandEnvironmentVariables($regFileRaw)).Trim()
        if ([string]::IsNullOrWhiteSpace($regFile)) {
            continue
        }
        if (Test-Path -Path $regFile -PathType Leaf) {
            Write-Color -Text "[registry] ", "scoop: ", "Importing ", $regFile -Color Blue, DarkGreen, White, Gray
            reg import "$regFile"
            if ($LASTEXITCODE -eq 0) {
                Write-Color -Text "[registry] ", "scoop: ", "(success) ", $regFile -Color Blue, DarkGreen, Green, Gray
            } else {
                Write-Color -Text "[registry] ", "scoop: ", "(failed) ", $regFile -Color Blue, DarkGreen, Red, Gray
            }
        } else {
            Write-Color -Text "[registry] ", "scoop: ", "(not found) ", $regFile -Color Blue, DarkGreen, Red, Gray
        }
    }
} else {
    Write-Color -Text "‚ÑπÔ∏è No Scoop registry files specified for import." -Color Green
}
Write-Host ""
{{ end }}

{{ if or .pkgs.windows.scoop.buckets .pkgs.windows.scoop.apps .pkgs.windows.scoop.importRegistry }}
Write-Color -Text "`n‚úÖ ", "Scoop configuration completed", "`n" -Color White, Green, White
{{ end }}
