#!/usr/bin/env pwsh
{{ if .pkgs.windows.winget }}

# Ensure we're running in PowerShell 7+
if ($PSVersionTable.PSVersion.Major -lt 7) {
    Write-Host "Relaunching in PowerShell Core..."
    & "C:\Program Files\PowerShell\7\pwsh.exe" -NoProfile -ExecutionPolicy Bypass -File $MyInvocation.MyCommand.Path
    exit
}

# Set up environment
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Ensure PSWriteColor is installed
if (-not (Get-Module -ListAvailable -Name PSWriteColor)) {
    Write-Host "Installing PSWriteColor module..."
    Install-Module -Name PSWriteColor -Force -Scope CurrentUser
}
Import-Module PSWriteColor

# Check for WinGet
if (-not (Get-Command "winget" -ErrorAction SilentlyContinue)) {
    Write-Error "Winget hasn't been installed!"
    exit 1
}

Write-Host ""
Write-Color -Text "***********************************" -Color Cyan
Write-Color -Text "**    INSTALLING WINGET PACKAGES    **" -Color Cyan
Write-Color -Text "***********************************" -Color Cyan
Write-Host ""

# Function to install WinGet packages with proper checks
function Install-WinGetPackage {
    param (
        [string]$PackageID,
        [array]$AdditionalArgs = @('--accept-source-agreements', '--accept-package-agreements')
    )

    # Check if package is already installed
    winget list --exact -q $PackageID | Out-Null
    if (!$?) {
        # Package not found, install it
        $wingetCmd = "winget install $PackageID"

        # Add additional arguments
        if ($AdditionalArgs.Count -ge 1) {
            $formattedArgs = $AdditionalArgs -join ' '
            $wingetCmd += " $formattedArgs"
        }

        # Execute the command
        Write-Color -Text "[package] ", "winget: ", "Installing ", $PackageID -Color Blue, Magenta, White, Gray
        Invoke-Expression "$wingetCmd >$null 2>&1"

        # Check result
        if ($LASTEXITCODE -eq 0) {
            Write-Color -Text "[package] ", "winget: ", "(success) ", $PackageID -Color Blue, Magenta, Green, Gray
        } else {
            Write-Color -Text "[package] ", "winget: ", "(failed) ", $PackageID -Color Blue, Magenta, Red, Gray
        }
    } else {
        # Package already installed
        Write-Color -Text "[package] ", "winget: ", "(exists) ", $PackageID -Color Blue, Magenta, Yellow, Gray
    }
}

# Install each package individually for better error handling
{{ range $package := .pkgs.windows.winget }}
Install-WinGetPackage -PackageID "{{ $package }}" -AdditionalArgs @('--accept-source-agreements', '--accept-package-agreements')
{{ end }}

Write-Color -Text "`nâœ… ", "WinGet package installation completed", "`n" -Color White, Green, White

{{ end }}
